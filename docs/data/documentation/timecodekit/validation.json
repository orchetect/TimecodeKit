{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Timecode-Component-Validation","level":2,"type":"heading","text":"Timecode Component Validation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Timecode validation can be helpful and powerful, for example, when parsing timecode strings read from an external data file or received as user-input in a text field."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Timecode can be tested as:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"valid or invalid as a whole, by catching an error when using the default throwing initializers or "},{"type":"codeVoice","code":"set()"},{"type":"text","text":" methods, or"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"granularly to test validity of individual timecode components"}]}]}]},{"type":"codeListing","syntax":"swift","code":["\/\/ example:","\/\/ 1 hour and 20 minutes ARE valid at 23.976 fps,","\/\/ but 75 seconds and 60 frames are NOT valid","","\/\/ non-granular validation","try Timecode(.components(h: 1, m: 20, s: 75, f: 60), at: ._23_976)","\/\/ == throws error; cannot form a valid timecode","","\/\/ granular validation","\/\/ allowingInvalid allows invalid values; does not throw errors so 'try' is not needed","Timecode(.components(h: 1, m: 20, s: 75, f: 60), at: ._23_976, by: .allowingInvalid)","    .invalidComponents \/\/ == [.seconds, .frames]"]},{"anchor":"Formatted-NSAttributedString","level":2,"type":"heading","text":"Formatted NSAttributedString"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method can produce an "},{"type":"codeVoice","code":"NSAttributedString"},{"type":"text","text":" highlighting individual invalid timecode components with a specified set of attributes."}]},{"type":"codeListing","syntax":"swift","code":["Timecode(.components(h: 1, m: 20, s: 75, f: 60), at: ._23_976, by: .allowingInvalid)","    .stringValueValidated()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The invalid formatting attributes defaults to applying "},{"type":"codeVoice","code":"[.foregroundColor: NSColor.red]"},{"type":"text","text":" to invalid components. You can alternatively supply your own invalid attributes by setting the "},{"type":"codeVoice","code":"invalidAttributes"},{"type":"text","text":" argument."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also supply a set of default attributes to set as the baseline attributes for the entire string."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ set text's background color to red instead of its foreground color","let invalidAttr: [NSAttributedString.Key: Any] = [","    .backgroundColor: NSColor.red","]","","\/\/ set custom font and font size for the entire string","let defaultAttr: [NSAttributedString.Key: Any] = [","    .font: NSFont.systemFont(ofSize: 16)","]","","Timecode(.components(h: 1, m: 20, s: 75, f: 60), at: ._23_976, by: .allowingInvalid)","    .stringValueValidated(invalidAttributes: invalidAttr,","                          defaultAttributes: defaultAttr)"]},{"anchor":"Formatted-SwiftUI-Text","level":2,"type":"heading","text":"Formatted SwiftUI Text"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method can produce a SwiftUI "},{"type":"codeVoice","code":"Text"},{"type":"text","text":" view highlighting individual invalid timecode components with a specified set of modifiers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The invalid formatting attributes defaults to applying "},{"type":"codeVoice","code":".foregroundColor(Color.red)"},{"type":"text","text":" to invalid components."}]},{"type":"codeListing","syntax":"swift","code":["Timecode(.components(h: 1, m: 20, s: 75, f: 60), at: ._23_976, by: .allowingInvalid)","    .stringValueValidatedText()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can alternatively supply your own invalid modifiers by setting the "},{"type":"codeVoice","code":"invalidModifiers"},{"type":"text","text":" argument."}]},{"type":"codeListing","syntax":"swift","code":["Timecode(.components(h: 1, m: 20, s: 75, f: 60), at: ._23_976, by: .allowingInvalid)","    .stringValueValidatedText(","        invalidModifiers: {","            $0.foregroundColor(.blue)","        }, defaultModifiers: {","            $0.foregroundColor(.black)","        }","    )"]},{"anchor":"NSFormatter","level":2,"type":"heading","text":"NSFormatter"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A special string "},{"type":"codeVoice","code":"Formatter"},{"type":"text","text":" ("},{"type":"codeVoice","code":"NSFormatter"},{"type":"text","text":") subclass can"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"process user-entered timecode strings and format them in realtime in a TextField"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"optionally highlight individual invalid timecode components with a specified set of attributes (defaults to red foreground color)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The invalid formatting attributes defaults to applying "},{"type":"codeVoice","code":"[.foregroundColor: NSColor.red]"},{"type":"text","text":" to invalid components. You can alternatively supply your own invalid attributes by setting the "},{"type":"codeVoice","code":"validationAttributes"},{"type":"text","text":" property on the formatter."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ set up formatter","let formatter = Timecode.TextFormatter(","    using: .init(","        rate: ._23_976,","        base: ._80SubFrames,","        limit: ._24Hours","    )","    stringFormat: [.showSubFrames],","    showsValidation: true,    \/\/ enable invalid component highlighting","    validationAttributes: nil \/\/ if nil, defaults to red foreground color",")","","\/\/ assign formatter to a TextField UI object, for example","let textField = NSTextField()","textField.formatter = formatter"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/timecodekit\/validation"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Validation","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Timecode valdation."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Validation","role":"article","modules":[{"name":"TimecodeKit"}]},"hierarchy":{"paths":[["doc:\/\/TimecodeKit\/documentation\/TimecodeKit","doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Getting-Started"]]},"seeAlsoSections":[{"title":"Basics","identifiers":["doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Initialization","doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Properties","doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Components","doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Display-String"],"generated":true}],"references":{"doc://TimecodeKit/documentation/TimecodeKit/Display-String":{"role":"article","title":"Display String","abstract":[{"type":"text","text":"Working with timecode strings for GUI display or data output."}],"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Display-String","kind":"article","type":"topic","url":"\/documentation\/timecodekit\/display-string"},"doc://TimecodeKit/documentation/TimecodeKit/Initialization":{"role":"article","title":"Initialization","abstract":[{"type":"text","text":"Basic initialization of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode"},{"type":"text","text":" struct."}],"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Initialization","kind":"article","type":"topic","url":"\/documentation\/timecodekit\/initialization"},"doc://TimecodeKit/documentation/TimecodeKit/Components":{"role":"article","title":"Components","abstract":[{"type":"text","text":"Defining and using timecode components."}],"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Components","kind":"article","type":"topic","url":"\/documentation\/timecodekit\/components"},"doc://TimecodeKit/documentation/TimecodeKit":{"role":"collection","title":"TimecodeKit","abstract":[{"type":"text","text":"Value types for representing and working with SMPTE timecode."}],"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit","kind":"symbol","type":"topic","url":"\/documentation\/timecodekit"},"doc://TimecodeKit/documentation/TimecodeKit/Timecode":{"role":"symbol","title":"Timecode","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Timecode"}],"abstract":[{"type":"text","text":"Value type representing SMPTE timecode."}],"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Timecode"}],"url":"\/documentation\/timecodekit\/timecode"},"doc://TimecodeKit/documentation/TimecodeKit/Getting-Started":{"role":"collectionGroup","title":"Getting Started","abstract":[{"type":"text","text":"Documentation and guides to get the most out of TimecodeKit."}],"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Getting-Started","kind":"article","type":"topic","url":"\/documentation\/timecodekit\/getting-started"},"doc://TimecodeKit/documentation/TimecodeKit/Properties":{"role":"article","title":"Properties","abstract":[{"type":"text","text":"Defining and using timecode properties."}],"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Properties","kind":"article","type":"topic","url":"\/documentation\/timecodekit\/properties"}}}