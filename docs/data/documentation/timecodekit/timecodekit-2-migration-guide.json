{"sections":[],"metadata":{"role":"article","title":"TimecodeKit 2 Migration Guide","roleHeading":"Article","modules":[{"name":"TimecodeKit"}]},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide is designed to assist in migrating projects currently using TimecodeKit 1.x to version 2.x. While not exhaustive, this guide covers the major API and workflow changes."}]},{"type":"heading","text":"Time Value Types","anchor":"Time-Value-Types","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to simplify initialization API and make time value types more easily discoverable, time values are now passed in as static wrappers to Timecode inits."}]},{"type":"paragraph","inlineContent":[{"identifier":"timecode-init.png","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example:"}]},{"type":"codeListing","code":["\/\/ 1.x API","Timecode(\"01:00:00:00\", at: ._24)","\/\/ 2.x API","Timecode(.string(\"01:00:00:00\"), at: .fps24)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Full list of corresponding time value enum cases:"}]},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"1.x API"}]}],[{"type":"paragraph","inlineContent":[{"text":"2.x API","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(TCC(), at: ._24)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"Timecode(.zero, at: .fps24)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(TCC(h: 1, m: 0, s: 0, f: 0), at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"code":"Timecode(.components(h: 1, m: 0, s: 0, f: 0), at: .fps24)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.frames(1234), at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"code":"Timecode(.frames(1234), at: .fps24)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.combined(frames: 123.5), at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.frames(123.5), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.split(frames: 123, subFrames: 50), at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.frames(123, subFrames: 50), at: .fps24)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(.splitUnitInterval(frames: 123, subFramesUnitInterval: 0.5), at: ._24)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"Timecode(.frames(123, subFramesUnitInterval: 0.5), at: .fps24)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(\"01:00:00:00\", at: ._24)"}]}],[{"inlineContent":[{"type":"codeVoice","code":"Timecode(.string(\"01:00:00:00\"), at: .fps24)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(realTime: 123.0, at: ._24)"}],"type":"paragraph"}],[{"inlineContent":[{"code":"Timecode(.realTime(seconds: 123.0), at: .fps24)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"code":"Timecode(samples: 123.0, sampleRate: 48000, at: ._24)","type":"codeVoice"}]}],[{"inlineContent":[{"code":"Timecode(.samples(123.0, sampleRate: 48000), at: .fps24)","type":"codeVoice"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(startOf: AVAsset(), at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"code":"Timecode(.avAsset(AVAsset(), .start), at: .fps24)","type":"codeVoice"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(durationOf: AVAsset(), at: ._24)"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"Timecode(.avAsset(AVAsset(), .duration), at: .fps24)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(endOf: AVAsset(), at: ._24)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"Timecode(.avAsset(AVAsset(), .end), at: .fps24)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(CMTime(), at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.cmTime(CMTime()), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"Timecode(Fraction(60, 1), at: ._24)","type":"codeVoice"}]}],[{"inlineContent":[{"code":"Timecode(.rational(60, 1), at: .fps24)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(FeetAndFrames(feet: 60, frames: 10), at: ._24)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.feetAndFrames(feet: 60, frames: 10), at: .fps24)"}]}]],[[{"inlineContent":[{"code":"Timecode(flattening: TimecodeInterval)","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.interval(flattening: TimecodeInterval)"}]}]]]},{"level":2,"type":"heading","text":"Timecode Validation","anchor":"Timecode-Validation"},{"inlineContent":[{"text":"Time value validation has changed from parameter labels to a new ","type":"text"},{"type":"codeVoice","code":"by:"},{"text":" parameter.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ \"exactly\" was denoted by an empty parameter label, and is a throwing init","\/\/ 1.x API","try Timecode(\"01:00:00:00\", at: ._24)","\/\/ 2.x API","try Timecode(.string(\"01:00:00:00\"), at: .fps24)","","\/\/ \"clamping\"","\/\/ 1.x API","Timecode(clamping: \"01:00:00:00\", at: ._24)","\/\/ 2.x API","Timecode(.string(\"01:00:00:00\"), at: .fps24, by: .clamping)","","\/\/ \"wrapping\"","\/\/ 1.x API","Timecode(wrapping: \"01:00:00:00\", at: ._24)","\/\/ 2.x API","Timecode(.string(\"01:00:00:00\"), at: .fps24, by: .wrapping)","","\/\/ \"rawValues\"","\/\/ 1.x API","Timecode(rawValues: \"01:00:00:00\", at: ._24)","\/\/ 2.x API","Timecode(.string(\"01:00:00:00\"), at: .fps24, by: .allowingInvalid)"]},{"anchor":"Timecode-String-Value","type":"heading","level":2,"text":"Timecode String Value"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"stringValue"},{"type":"text","text":" property is now the "},{"type":"reference","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Timecode\/stringValue(format:)","isActive":true},{"type":"text","text":" method."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The Timecode struct no longer stores string formatting properties. Instead, formatting options are now optionally passed when calling "},{"type":"reference","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Timecode\/stringValue(format:)","isActive":true},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"codeListing","code":["\/\/ 1.x API","let timecode = try Timecode(TCC(h: 1, m: 0, s: 0, f: 0, sf: 50), at: ._24)","timecode.stringValue \/\/ \"01:00:00:00\"","timecode.stringFormat = [.showSubFrames]","timecode.stringValue \/\/ \"01:00:00:00.50\"","\/\/ 2.x API","let timecode = try Timecode(.components(h: 1, m: 0, s: 0, f: 0, sf: 50), at: .fps24)","timecode.stringValue() \/\/ \"01:00:00:00\"","timecode.stringValue(format: [.showSubFrames]) \/\/ \"01:00:00:00.50\""],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"stringValueFileNameCompatible"},{"type":"text","text":" property has been removed and is now a format option."}]}]}]},{"type":"codeListing","syntax":"swift","code":["timecode.stringValue(format: [.filenameCompatible])"]},{"text":"Timecode Properties","anchor":"Timecode-Properties","level":2,"type":"heading"},{"inlineContent":[{"text":"As in TimecodeKit 1.x, it is still possible to pass properties directly to the initializer as parameters:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let timecode = try Timecode(","    .components(h: 1, m: 0, s: 0, f: 0), ","    at: .fps24,","    base: .max80SubFrames,","    limit: .max24Hours",")"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Timecode metadata can now also be constructed and passed using a new "},{"identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Timecode\/Properties-swift.struct","isActive":true,"type":"reference"},{"text":" struct. It contains:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"frameRate"}]}]},{"content":[{"inlineContent":[{"code":"subFramesBase","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"upperLimit","type":"codeVoice"}]}]}]},{"type":"codeListing","syntax":"swift","code":["\/\/ construct a Timecode.Properties instance","\/\/ and pass it to a new Timecode instance","let properties = Timecode.Properties(","    rate: .fps24,","    base: .max80SubFrames,","    limit: .max24Hours",")","let timecode = Timecode(","    .components(h: 1, m: 0, s: 0, f: 0),","    using: properties",")","","\/\/ it can also be fetched using the `properties` property and used to","\/\/ construct a new Timecode with the same properties","let newTimecode = Timecode(","    .components(h: 2, m: 0, s: 0, f: 0),","    using: timecode.properties",")"]},{"level":2,"text":"Set Timecode on an Existing Timecode Instance","type":"heading","anchor":"Set-Timecode-on-an-Existing-Timecode-Instance"},{"inlineContent":[{"text":"Previous ","type":"text"},{"type":"codeVoice","code":"Timecode"},{"text":" ","type":"text"},{"code":"setTimecode()","type":"codeVoice"},{"type":"text","text":" methods have been refactored to use a more consistent "},{"code":"set()","type":"codeVoice"},{"type":"text","text":" methods, with overloads similar to the new "},{"code":"Timecode","type":"codeVoice"},{"text":" initializers.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This allows set methods to take the same value sources and validation rules by using the same API as the initializers."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example:","type":"text"}]},{"type":"codeListing","code":["var timecode = Timecode(.zero, at: .fps24)","try timecode.set(.realTime(seconds: 123.0))","timecode.set(.frames(1234), by: .wrapping)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"For value type reference, see the "},{"type":"reference","isActive":true,"identifier":"#Time-Value-Types"},{"type":"text","text":" section above."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For timecode validation rules reference, see the "},{"isActive":true,"type":"reference","identifier":"#Timecode-Validation"},{"type":"text","text":" section above."}],"type":"paragraph"},{"text":"Removal Functional Shorthand","type":"heading","level":2,"anchor":"Removal-Functional-Shorthand"},{"type":"paragraph","inlineContent":[{"text":"For technical reasons and to avoid ambiguity for time value types that are common types (such as TimeInterval aka Double),","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"toTimecode(...)","type":"codeVoice"},{"text":" category methods have been removed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example:","type":"text"}]},{"type":"codeListing","code":["\/\/ 1.x API","try \"01:00:00:00\".toTimecode(at: ._24)","\/\/ 2.x API","\/\/ (removed)"],"syntax":"swift"},{"type":"heading","text":"Enum Case Respellings","anchor":"Enum-Case-Respellings","level":2},{"inlineContent":[{"type":"text","text":"Some enum cases have been renamed to conform to lowerCamelCase and replace underscore prefixes."}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/TimecodeFrameRate","isActive":true},{"text":" cases have been renamed.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"._24"},{"text":" is now ","type":"text"},{"type":"codeVoice","code":".fps24"},{"text":" and so on","type":"text"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/VideoFrameRate","isActive":true},{"type":"text","text":" cases have been renamed."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"._24p","type":"codeVoice"},{"text":" is now ","type":"text"},{"type":"codeVoice","code":".fps24p"},{"type":"text","text":" and so on"}]}]}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Timecode\/UpperLimit-swift.enum"},{"type":"text","text":" cases have been renamed."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"._24hours"},{"type":"text","text":" is now "},{"type":"codeVoice","code":".max24Hours"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"._100days","type":"codeVoice"},{"type":"text","text":" is now "},{"code":".max100Days","type":"codeVoice"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Timecode\/SubFramesBase-swift.enum","isActive":true},{"type":"text","text":" cases have been renamed."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"._80SubFrames","type":"codeVoice"},{"text":" is now ","type":"text"},{"code":".max80SubFrames","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"._100SubFrames"},{"type":"text","text":" is now "},{"type":"codeVoice","code":".max100SubFrames"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/TimecodeFrameRate\/CompatibleGroup-swift.enum","isActive":true},{"type":"text","text":" cases have been renamed."}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".NTSC"},{"type":"text","text":" is now "},{"type":"codeVoice","code":".ntscColor"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".NTSC_drop"},{"type":"text","text":" is now "},{"type":"codeVoice","code":".ntscDrop"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":".ATSC"},{"type":"text","text":" is now "},{"type":"codeVoice","code":".whole"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".ATSC_drop"},{"text":" is now ","type":"text"},{"type":"codeVoice","code":".ntscColorWallTime"}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/timecodekit\/timecodekit-2-migration-guide"]}],"abstract":[{"type":"text","text":"API changes from TimecodeKit version 1 to version 2."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"generated":true,"title":"Welcome","anchor":"Welcome","identifiers":["doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Getting-Started"]}],"hierarchy":{"paths":[["doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit"]]},"kind":"article","identifier":{"url":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/TimecodeKit-2-Migration-Guide","interfaceLanguage":"swift"},"references":{"doc://timecodekit.TimecodeKit/documentation/TimecodeKit/Timecode/stringValue(format:)":{"type":"topic","kind":"symbol","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Timecode\/stringValue(format:)","abstract":[{"text":"Timecode string representation.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"stringValue"},{"text":"(","kind":"text"},{"text":"format","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11TimecodeKit0A0V12StringFormata","text":"StringFormat"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"title":"stringValue(format:)","url":"\/documentation\/timecodekit\/timecode\/stringvalue(format:)","role":"symbol"},"doc://timecodekit.TimecodeKit/documentation/TimecodeKit/Getting-Started":{"type":"topic","abstract":[{"text":"Documentation and guides to get the most out of TimecodeKit.","type":"text"}],"url":"\/documentation\/timecodekit\/getting-started","role":"article","title":"Getting Started","kind":"article","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Getting-Started"},"doc://timecodekit.TimecodeKit/documentation/TimecodeKit/Timecode/Properties-swift.struct":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Properties","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"reference","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Timecode","isActive":true},{"text":" properties.","type":"text"}],"identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Timecode\/Properties-swift.struct","type":"topic","navigatorTitle":[{"text":"Properties","kind":"identifier"}],"role":"symbol","title":"Timecode.Properties","url":"\/documentation\/timecodekit\/timecode\/properties-swift.struct"},"#Time-Value-Types":{"type":"link","identifier":"#Time-Value-Types","titleInlineContent":[{"type":"text","text":"Time Value Types"}],"url":"#Time-Value-Types","title":"Time Value Types"},"doc://timecodekit.TimecodeKit/documentation/TimecodeKit/Timecode/SubFramesBase-swift.enum":{"type":"topic","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Timecode\/SubFramesBase-swift.enum","abstract":[{"text":"Represents the base (denominator) used when dealing with subframes.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This defines how many equal parts a single frame may be divided up into."}],"title":"Timecode.SubFramesBase","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SubFramesBase"}],"navigatorTitle":[{"kind":"identifier","text":"SubFramesBase"}],"kind":"symbol","url":"\/documentation\/timecodekit\/timecode\/subframesbase-swift.enum"},"doc://timecodekit.TimecodeKit/documentation/TimecodeKit":{"role":"collection","title":"TimecodeKit","url":"\/documentation\/timecodekit","type":"topic","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit","kind":"symbol","abstract":[{"type":"text","text":"Value types for representing and working with SMPTE\/EBU timecode."}]},"timecode-init.png":{"type":"image","identifier":"timecode-init.png","alt":"Timecode init","variants":[{"url":"\/images\/timecodekit.TimecodeKit\/timecode-init.png","traits":["1x","light"]}]},"doc://timecodekit.TimecodeKit/documentation/TimecodeKit/Timecode/UpperLimit-swift.enum":{"role":"symbol","url":"\/documentation\/timecodekit\/timecode\/upperlimit-swift.enum","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"UpperLimit","kind":"identifier"}],"abstract":[{"text":"Enum describing the maximum timecode ceiling.","type":"text"}],"identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Timecode\/UpperLimit-swift.enum","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"UpperLimit"}],"title":"Timecode.UpperLimit"},"doc://timecodekit.TimecodeKit/documentation/TimecodeKit/VideoFrameRate":{"url":"\/documentation\/timecodekit\/videoframerate","navigatorTitle":[{"text":"VideoFrameRate","kind":"identifier"}],"abstract":[{"type":"text","text":"Industry-standard video frame rates."},{"text":" ","type":"text"},{"type":"text","text":"Certain rates may be progressive or interleaved."}],"type":"topic","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/VideoFrameRate","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"VideoFrameRate","kind":"identifier"}],"kind":"symbol","title":"VideoFrameRate"},"#Timecode-Validation":{"type":"link","identifier":"#Timecode-Validation","titleInlineContent":[{"type":"text","text":"Timecode Validation"}],"url":"#Timecode-Validation","title":"Timecode Validation"},"doc://timecodekit.TimecodeKit/documentation/TimecodeKit/Timecode":{"role":"symbol","navigatorTitle":[{"text":"Timecode","kind":"identifier"}],"title":"Timecode","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/Timecode","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Timecode","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/timecodekit\/timecode","type":"topic","abstract":[{"text":"Value type representing SMPTE\/EBU timecode.","type":"text"}]},"doc://timecodekit.TimecodeKit/documentation/TimecodeKit/TimecodeFrameRate":{"role":"symbol","url":"\/documentation\/timecodekit\/timecodeframerate","navigatorTitle":[{"text":"TimecodeFrameRate","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimecodeFrameRate"}],"type":"topic","title":"TimecodeFrameRate","kind":"symbol","abstract":[{"type":"text","text":"Industry-standard BITC (burn-in timecode) display rates."},{"text":" ","type":"text"},{"type":"text","text":"Certain rates may be drop-frame or non-drop-frame."}],"identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/TimecodeFrameRate"},"doc://timecodekit.TimecodeKit/documentation/TimecodeKit/TimecodeFrameRate/CompatibleGroup-swift.enum":{"abstract":[{"type":"text","text":"Enum describing compatible groupings of frame rates."}],"navigatorTitle":[{"kind":"identifier","text":"CompatibleGroup"}],"kind":"symbol","identifier":"doc:\/\/timecodekit.TimecodeKit\/documentation\/TimecodeKit\/TimecodeFrameRate\/CompatibleGroup-swift.enum","type":"topic","url":"\/documentation\/timecodekit\/timecodeframerate\/compatiblegroup-swift.enum","title":"TimecodeFrameRate.CompatibleGroup","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompatibleGroup"}]}}}