{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/TimecodeKit-2-Migration-Guide"},"sections":[],"hierarchy":{"paths":[["doc:\/\/TimecodeKit\/documentation\/TimecodeKit"]]},"metadata":{"title":"TimecodeKit 2 Migration Guide","roleHeading":"Article","modules":[{"name":"TimecodeKit"}],"role":"article"},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"API changes from TimecodeKit version 1 to version 2."}],"kind":"article","variants":[{"paths":["\/documentation\/timecodekit\/timecodekit-2-migration-guide"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"This guide is designed to assist in migrating projects currently using TimecodeKit 1.x to version 2.x. While not exhaustive, this guide covers the major API and workflow changes."}],"type":"paragraph"},{"type":"heading","text":"Time Value Types","anchor":"Time-Value-Types","level":2},{"inlineContent":[{"type":"text","text":"In order to simplify initialization API and make time value types more easily discoverable, time values are now passed in as static wrappers to Timecode inits."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"timecode-init.png"}]},{"type":"paragraph","inlineContent":[{"text":"For example:","type":"text"}]},{"syntax":"swift","code":["\/\/ 1.x API","Timecode(\"01:00:00:00\", at: ._24)","\/\/ 2.x API","Timecode(.string(\"01:00:00:00\"), at: .fps24)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Full list of corresponding time value enum cases:"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"text":"1.x API","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"2.x API"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"Timecode(TCC(), at: ._24)","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.zero, at: .fps24)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(TCC(h: 1, m: 0, s: 0, f: 0), at: ._24)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.components(h: 1, m: 0, s: 0, f: 0), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"Timecode(.frames(1234), at: ._24)","type":"codeVoice"}]}],[{"inlineContent":[{"code":"Timecode(.frames(1234), at: .fps24)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(.combined(frames: 123.5), at: ._24)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.frames(123.5), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"Timecode(.split(frames: 123, subFrames: 50), at: ._24)","type":"codeVoice"}]}],[{"inlineContent":[{"code":"Timecode(.frames(123, subFrames: 50), at: .fps24)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(.splitUnitInterval(frames: 123, subFramesUnitInterval: 0.5), at: ._24)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.frames(123, subFramesUnitInterval: 0.5), at: .fps24)"}]}]],[[{"inlineContent":[{"code":"Timecode(\"01:00:00:00\", at: ._24)","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.string(\"01:00:00:00\"), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(realTime: 123.0, at: ._24)"}]}],[{"inlineContent":[{"type":"codeVoice","code":"Timecode(.realTime(seconds: 123.0), at: .fps24)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(samples: 123.0, sampleRate: 48000, at: ._24)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"Timecode(.samples(123.0, sampleRate: 48000), at: .fps24)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(startOf: AVAsset(), at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"code":"Timecode(.avAsset(AVAsset(), .start), at: .fps24)","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"Timecode(durationOf: AVAsset(), at: ._24)","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"Timecode(.avAsset(AVAsset(), .duration), at: .fps24)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"Timecode(endOf: AVAsset(), at: ._24)","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.avAsset(AVAsset(), .end), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(CMTime(), at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.cmTime(CMTime()), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"Timecode(Fraction(60, 1), at: ._24)","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"Timecode(.rational(60, 1), at: .fps24)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(FeetAndFrames(feet: 60, frames: 10), at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.feetAndFrames(feet: 60, frames: 10), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(flattening: TimecodeInterval)"}]}],[{"type":"paragraph","inlineContent":[{"code":"Timecode(.interval(flattening: TimecodeInterval)","type":"codeVoice"}]}]]]},{"level":2,"type":"heading","text":"Timecode Validation","anchor":"Timecode-Validation"},{"inlineContent":[{"text":"Time value validation has changed from parameter labels to a new ","type":"text"},{"type":"codeVoice","code":"by:"},{"type":"text","text":" parameter."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ \"exactly\" was denoted by an empty parameter label, and is a throwing init","\/\/ 1.x API","try Timecode(\"01:00:00:00\", at: ._24)","\/\/ 2.x API","try Timecode(.string(\"01:00:00:00\"), at: .fps24)","","\/\/ \"clamping\"","\/\/ 1.x API","Timecode(clamping: \"01:00:00:00\", at: ._24)","\/\/ 2.x API","Timecode(.string(\"01:00:00:00\"), at: .fps24, by: .clamping)","","\/\/ \"wrapping\"","\/\/ 1.x API","Timecode(wrapping: \"01:00:00:00\", at: ._24)","\/\/ 2.x API","Timecode(.string(\"01:00:00:00\"), at: .fps24, by: .wrapping)","","\/\/ \"rawValues\"","\/\/ 1.x API","Timecode(rawValues: \"01:00:00:00\", at: ._24)","\/\/ 2.x API","Timecode(.string(\"01:00:00:00\"), at: .fps24, by: .allowingInvalid)"],"type":"codeListing"},{"type":"heading","anchor":"Timecode-String-Value","level":2,"text":"Timecode String Value"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"stringValue"},{"type":"text","text":" property is now the "},{"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/stringValue(format:)","isActive":true},{"type":"text","text":" method."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The Timecode struct no longer stores string formatting properties. Instead, formatting options are now optionally passed when calling ","type":"text"},{"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/stringValue(format:)","isActive":true},{"type":"text","text":"."}]}]}]},{"syntax":"swift","type":"codeListing","code":["\/\/ 1.x API","let timecode = try Timecode(TCC(h: 1, m: 0, s: 0, f: 0, sf: 50), at: ._24)","timecode.stringValue \/\/ \"01:00:00:00\"","timecode.stringFormat = [.showSubFrames]","timecode.stringValue \/\/ \"01:00:00:00.50\"","\/\/ 2.x API","let timecode = try Timecode(.components(h: 1, m: 0, s: 0, f: 0, sf: 50), at: .fps24)","timecode.stringValue() \/\/ \"01:00:00:00\"","timecode.stringValue(format: [.showSubFrames]) \/\/ \"01:00:00:00.50\""]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"stringValueFileNameCompatible","type":"codeVoice"},{"type":"text","text":" property has been removed and is now a format option."}],"type":"paragraph"}]}]},{"syntax":"swift","code":["timecode.stringValue(format: [.filenameCompatible])"],"type":"codeListing"},{"level":2,"anchor":"Timecode-Properties","text":"Timecode Properties","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"As in TimecodeKit 1.x, it is still possible to pass properties directly to the initializer as parameters:","type":"text"}]},{"code":["let timecode = try Timecode(","    .components(h: 1, m: 0, s: 0, f: 0), ","    at: .fps24,","    base: .max80SubFrames,","    limit: .max24Hours",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Timecode metadata can now also be constructed and passed using a new "},{"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/Properties-swift.struct","isActive":true,"type":"reference"},{"text":" struct. It contains:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"frameRate","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"subFramesBase"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"upperLimit"}]}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["\/\/ construct a Timecode.Properties instance","\/\/ and pass it to a new Timecode instance","let properties = Timecode.Properties(","    rate: .fps24,","    base: .max80SubFrames,","    limit: .max24Hours",")","let timecode = Timecode(","    .components(h: 1, m: 0, s: 0, f: 0),","    using: properties",")","","\/\/ it can also be fetched using the `properties` property and used to","\/\/ construct a new Timecode with the same properties","let newTimecode = Timecode(","    .components(h: 2, m: 0, s: 0, f: 0),","    using: timecode.properties",")"]},{"text":"Set Timecode on an Existing Timecode Instance","type":"heading","level":2,"anchor":"Set-Timecode-on-an-Existing-Timecode-Instance"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Previous "},{"type":"codeVoice","code":"Timecode"},{"type":"text","text":" "},{"code":"setTimecode()","type":"codeVoice"},{"type":"text","text":" methods have been refactored to use a more consistent "},{"type":"codeVoice","code":"set()"},{"type":"text","text":" methods, with overloads similar to the new "},{"code":"Timecode","type":"codeVoice"},{"type":"text","text":" initializers."},{"text":" ","type":"text"},{"type":"text","text":"This allows set methods to take the same value sources and validation rules by using the same API as the initializers."}]},{"inlineContent":[{"type":"text","text":"For example:"}],"type":"paragraph"},{"code":["var timecode = Timecode(.zero, at: .fps24)","try timecode.set(.realTime(seconds: 123.0))","timecode.set(.frames(1234), by: .wrapping)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"For value type reference, see the ","type":"text"},{"isActive":true,"identifier":"#Time-Value-Types","type":"reference"},{"text":" section above.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For timecode validation rules reference, see the "},{"isActive":true,"type":"reference","identifier":"#Timecode-Validation"},{"type":"text","text":" section above."}],"type":"paragraph"},{"level":2,"text":"Removal Functional Shorthand","anchor":"Removal-Functional-Shorthand","type":"heading"},{"inlineContent":[{"text":"For technical reasons and to avoid ambiguity for time value types that are common types (such as TimeInterval aka Double),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"toTimecode(...)","type":"codeVoice"},{"type":"text","text":" category methods have been removed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example:"}]},{"syntax":"swift","code":["\/\/ 1.x API","try \"01:00:00:00\".toTimecode(at: ._24)","\/\/ 2.x API","\/\/ (removed)"],"type":"codeListing"},{"level":2,"type":"heading","text":"Enum Case Respellings","anchor":"Enum-Case-Respellings"},{"inlineContent":[{"type":"text","text":"Some enum cases have been renamed to conform to lowerCamelCase and replace underscore prefixes."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/TimecodeFrameRate","isActive":true},{"text":" cases have been renamed.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"._24"},{"text":" is now ","type":"text"},{"type":"codeVoice","code":".fps24"},{"text":" and so on","type":"text"}]}]}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/VideoFrameRate","isActive":true,"type":"reference"},{"type":"text","text":" cases have been renamed."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"._24p"},{"type":"text","text":" is now "},{"code":".fps24p","type":"codeVoice"},{"type":"text","text":" and so on"}]}]}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/UpperLimit-swift.enum","isActive":true},{"text":" cases have been renamed.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"._24hours"},{"text":" is now ","type":"text"},{"type":"codeVoice","code":".max24Hours"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"._100days","type":"codeVoice"},{"text":" is now ","type":"text"},{"type":"codeVoice","code":".max100Days"}]}]}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/SubFramesBase-swift.enum","isActive":true},{"text":" cases have been renamed.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"._80SubFrames","type":"codeVoice"},{"type":"text","text":" is now "},{"code":".max80SubFrames","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"._100SubFrames"},{"type":"text","text":" is now "},{"type":"codeVoice","code":".max100SubFrames"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/TimecodeFrameRate\/CompatibleGroup-swift.enum"},{"text":" cases have been renamed.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":".NTSC","type":"codeVoice"},{"text":" is now ","type":"text"},{"code":".ntscColor","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":".NTSC_drop"},{"text":" is now ","type":"text"},{"code":".ntscDrop","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":".ATSC"},{"type":"text","text":" is now "},{"code":".whole","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":".ATSC_drop","type":"codeVoice"},{"text":" is now ","type":"text"},{"code":".ntscColorWallTime","type":"codeVoice"}]}]}]}]}]}],"kind":"content"}],"seeAlsoSections":[{"anchor":"Welcome","title":"Welcome","generated":true,"identifiers":["doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Getting-Started"]}],"references":{"doc://TimecodeKitCore/documentation/TimecodeKitCore/VideoFrameRate":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"VideoFrameRate","kind":"identifier"}],"abstract":[{"text":"Industry-standard video frame rates.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Certain rates may be progressive or interleaved."}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/VideoFrameRate","type":"topic","role":"symbol","title":"VideoFrameRate","url":"\/documentation\/timecodekitcore\/videoframerate","kind":"symbol"},"#Time-Value-Types":{"url":"#Time-Value-Types","title":"Time Value Types","titleInlineContent":[{"type":"text","text":"Time Value Types"}],"identifier":"#Time-Value-Types","type":"link"},"doc://TimecodeKit/documentation/TimecodeKit/Getting-Started":{"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Getting-Started","abstract":[{"type":"text","text":"Documentation and guides to get the most out of TimecodeKit."}],"type":"topic","role":"article","title":"Getting Started","url":"\/documentation\/timecodekit\/getting-started","kind":"article"},"#Timecode-Validation":{"url":"#Timecode-Validation","title":"Timecode Validation","titleInlineContent":[{"type":"text","text":"Timecode Validation"}],"identifier":"#Timecode-Validation","type":"link"},"doc://TimecodeKit/documentation/TimecodeKit":{"type":"topic","url":"\/documentation\/timecodekit","role":"collection","title":"TimecodeKit","abstract":[{"text":"Umbrella module that imports the entire TimecodeKit library. Contains a Getting Started guide.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode/UpperLimit-swift.enum":{"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/UpperLimit-swift.enum","type":"topic","kind":"symbol","title":"Timecode.UpperLimit","abstract":[{"text":"Enum describing the maximum timecode ceiling.","type":"text"}],"role":"symbol","url":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"UpperLimit","kind":"identifier"}]},"doc://TimecodeKitCore/documentation/TimecodeKitCore/TimecodeFrameRate":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimecodeFrameRate","kind":"identifier"}],"url":"\/documentation\/timecodekitcore\/timecodeframerate","abstract":[{"text":"Industry-standard BITC (burn-in timecode) display rates.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Certain rates may be drop-frame or non-drop-frame."}],"kind":"symbol","title":"TimecodeFrameRate","type":"topic","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/TimecodeFrameRate","role":"symbol"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode/SubFramesBase-swift.enum":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SubFramesBase","kind":"identifier"}],"abstract":[{"text":"Represents the base (denominator) used when dealing with subframes.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This defines how many equal parts a single frame may be divided up into."}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/SubFramesBase-swift.enum","type":"topic","role":"symbol","title":"Timecode.SubFramesBase","url":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum","kind":"symbol"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/TimecodeFrameRate/CompatibleGroup-swift.enum":{"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/TimecodeFrameRate\/CompatibleGroup-swift.enum","type":"topic","kind":"symbol","title":"TimecodeFrameRate.CompatibleGroup","abstract":[{"text":"Enum describing compatible groupings of frame rates.","type":"text"}],"role":"symbol","url":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"CompatibleGroup","kind":"identifier"}]},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode/stringValue(format:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"stringValue","kind":"identifier"},{"text":"(","kind":"text"},{"text":"format","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:15TimecodeKitCore0A0V","text":"Timecode"},{"text":".","kind":"text"},{"text":"StringFormat","preciseIdentifier":"s:15TimecodeKitCore0A0V12StringFormata","kind":"typeIdentifier"},{"text":" = .default()) -> ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"abstract":[{"text":"Returns the timecode’s string representation.","type":"text"}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/stringValue(format:)","type":"topic","role":"symbol","title":"stringValue(format:)","url":"\/documentation\/timecodekitcore\/timecode\/stringvalue(format:)","kind":"symbol"},"timecode-init.png":{"alt":"Timecode init","variants":[{"traits":["1x","light"],"url":"\/images\/TimecodeKit\/timecode-init.png"}],"identifier":"timecode-init.png","type":"image"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode/Properties-swift.struct":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Properties","kind":"identifier"}],"abstract":[{"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode","isActive":true},{"type":"text","text":" properties."}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/Properties-swift.struct","type":"topic","role":"symbol","title":"Timecode.Properties","url":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct","kind":"symbol"}}}