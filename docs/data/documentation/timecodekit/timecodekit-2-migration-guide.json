{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/TimecodeKit-2-Migration-Guide"},"metadata":{"modules":[{"name":"TimecodeKit"}],"roleHeading":"Article","title":"TimecodeKit 2 Migration Guide","role":"article"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This guide is designed to assist in migrating projects currently using TimecodeKit 1.x to version 2.x. While not exhaustive, this guide covers the major API and workflow changes."}],"type":"paragraph"},{"text":"Time Value Types","level":2,"type":"heading","anchor":"Time-Value-Types"},{"type":"paragraph","inlineContent":[{"text":"In order to simplify initialization API and make time value types more easily discoverable, time values are now passed in as static wrappers to Timecode inits.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"timecode-init.png"}]},{"inlineContent":[{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ 1.x API","Timecode(\"01:00:00:00\", at: ._24)","\/\/ 2.x API","Timecode(.string(\"01:00:00:00\"), at: .fps24)"]},{"inlineContent":[{"text":"Full list of corresponding time value enum cases:","type":"text"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"1.x API","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"2.x API"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(TCC(), at: ._24)"}]}],[{"inlineContent":[{"type":"codeVoice","code":"Timecode(.zero, at: .fps24)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(TCC(h: 1, m: 0, s: 0, f: 0), at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.components(h: 1, m: 0, s: 0, f: 0), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.frames(1234), at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.frames(1234), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"Timecode(.combined(frames: 123.5), at: ._24)","type":"codeVoice"}]}],[{"inlineContent":[{"code":"Timecode(.frames(123.5), at: .fps24)","type":"codeVoice"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(.split(frames: 123, subFrames: 50), at: ._24)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.frames(123, subFrames: 50), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"Timecode(.splitUnitInterval(frames: 123, subFramesUnitInterval: 0.5), at: ._24)","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.frames(123, subFramesUnitInterval: 0.5), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(\"01:00:00:00\", at: ._24)"}]}],[{"inlineContent":[{"type":"codeVoice","code":"Timecode(.string(\"01:00:00:00\"), at: .fps24)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(realTime: 123.0, at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.realTime(seconds: 123.0), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(samples: 123.0, sampleRate: 48000, at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.samples(123.0, sampleRate: 48000), at: .fps24)"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(startOf: AVAsset(), at: ._24)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.avAsset(AVAsset(), .start), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"Timecode(durationOf: AVAsset(), at: ._24)","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.avAsset(AVAsset(), .duration), at: .fps24)"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"Timecode(endOf: AVAsset(), at: ._24)","type":"codeVoice"}]}],[{"inlineContent":[{"type":"codeVoice","code":"Timecode(.avAsset(AVAsset(), .end), at: .fps24)"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"codeVoice","code":"Timecode(CMTime(), at: ._24)"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":"Timecode(.cmTime(CMTime()), at: .fps24)"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(Fraction(60, 1), at: ._24)"}]}],[{"type":"paragraph","inlineContent":[{"code":"Timecode(.rational(60, 1), at: .fps24)","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"Timecode(FeetAndFrames(feet: 60, frames: 10), at: ._24)","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode(.feetAndFrames(feet: 60, frames: 10), at: .fps24)"}]}]],[[{"inlineContent":[{"code":"Timecode(flattening: TimecodeInterval)","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"Timecode(.interval(flattening: TimecodeInterval)","type":"codeVoice"}]}]]]},{"type":"heading","anchor":"Timecode-Validation","text":"Timecode Validation","level":2},{"inlineContent":[{"text":"Time value validation has changed from parameter labels to a new ","type":"text"},{"code":"by:","type":"codeVoice"},{"text":" parameter.","type":"text"}],"type":"paragraph"},{"code":["\/\/ \"exactly\" was denoted by an empty parameter label, and is a throwing init","\/\/ 1.x API","try Timecode(\"01:00:00:00\", at: ._24)","\/\/ 2.x API","try Timecode(.string(\"01:00:00:00\"), at: .fps24)","","\/\/ \"clamping\"","\/\/ 1.x API","Timecode(clamping: \"01:00:00:00\", at: ._24)","\/\/ 2.x API","Timecode(.string(\"01:00:00:00\"), at: .fps24, by: .clamping)","","\/\/ \"wrapping\"","\/\/ 1.x API","Timecode(wrapping: \"01:00:00:00\", at: ._24)","\/\/ 2.x API","Timecode(.string(\"01:00:00:00\"), at: .fps24, by: .wrapping)","","\/\/ \"rawValues\"","\/\/ 1.x API","Timecode(rawValues: \"01:00:00:00\", at: ._24)","\/\/ 2.x API","Timecode(.string(\"01:00:00:00\"), at: .fps24, by: .allowingInvalid)"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":2,"text":"Timecode String Value","anchor":"Timecode-String-Value"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"stringValue"},{"type":"text","text":" property is now the "},{"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/stringValue(format:)","isActive":true,"type":"reference"},{"type":"text","text":" method."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The Timecode struct no longer stores string formatting properties. Instead, formatting options are now optionally passed when calling "},{"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/stringValue(format:)","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["\/\/ 1.x API","let timecode = try Timecode(TCC(h: 1, m: 0, s: 0, f: 0, sf: 50), at: ._24)","timecode.stringValue \/\/ \"01:00:00:00\"","timecode.stringFormat = [.showSubFrames]","timecode.stringValue \/\/ \"01:00:00:00.50\"","\/\/ 2.x API","let timecode = try Timecode(.components(h: 1, m: 0, s: 0, f: 0, sf: 50), at: .fps24)","timecode.stringValue() \/\/ \"01:00:00:00\"","timecode.stringValue(format: [.showSubFrames]) \/\/ \"01:00:00:00.50\""]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"stringValueFileNameCompatible","type":"codeVoice"},{"text":" property has been removed and is now a format option.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"code":["timecode.stringValue(format: [.filenameCompatible])"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":2,"text":"Timecode Properties","anchor":"Timecode-Properties"},{"inlineContent":[{"type":"text","text":"As in TimecodeKit 1.x, it is still possible to pass properties directly to the initializer as parameters:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let timecode = try Timecode(","    .components(h: 1, m: 0, s: 0, f: 0), ","    at: .fps24,","    base: .max80SubFrames,","    limit: .max24Hours",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Timecode metadata can now also be constructed and passed using a new "},{"isActive":true,"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/Properties-swift.struct"},{"type":"text","text":" struct. It contains:"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"frameRate"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"subFramesBase","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"upperLimit"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["\/\/ construct a Timecode.Properties instance","\/\/ and pass it to a new Timecode instance","let properties = Timecode.Properties(","    rate: .fps24,","    base: .max80SubFrames,","    limit: .max24Hours",")","let timecode = Timecode(","    .components(h: 1, m: 0, s: 0, f: 0),","    using: properties",")","","\/\/ it can also be fetched using the `properties` property and used to","\/\/ construct a new Timecode with the same properties","let newTimecode = Timecode(","    .components(h: 2, m: 0, s: 0, f: 0),","    using: timecode.properties",")"]},{"type":"heading","text":"Set Timecode on an Existing Timecode Instance","anchor":"Set-Timecode-on-an-Existing-Timecode-Instance","level":2},{"type":"paragraph","inlineContent":[{"text":"Previous ","type":"text"},{"type":"codeVoice","code":"Timecode"},{"text":" ","type":"text"},{"type":"codeVoice","code":"setTimecode()"},{"type":"text","text":" methods have been refactored to use a more consistent "},{"type":"codeVoice","code":"set()"},{"type":"text","text":" methods, with overloads similar to the new "},{"code":"Timecode","type":"codeVoice"},{"text":" initializers.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This allows set methods to take the same value sources and validation rules by using the same API as the initializers."}]},{"type":"paragraph","inlineContent":[{"text":"For example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var timecode = Timecode(.zero, at: .fps24)","try timecode.set(.realTime(seconds: 123.0))","timecode.set(.frames(1234), by: .wrapping)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For value type reference, see the "},{"isActive":true,"type":"reference","identifier":"#Time-Value-Types"},{"type":"text","text":" section above."}]},{"inlineContent":[{"text":"For timecode validation rules reference, see the ","type":"text"},{"identifier":"#Timecode-Validation","isActive":true,"type":"reference"},{"type":"text","text":" section above."}],"type":"paragraph"},{"anchor":"Removal-Functional-Shorthand","level":2,"text":"Removal Functional Shorthand","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For technical reasons and to avoid ambiguity for time value types that are common types (such as TimeInterval aka Double),"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"toTimecode(...)","type":"codeVoice"},{"type":"text","text":" category methods have been removed."}]},{"type":"paragraph","inlineContent":[{"text":"For example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ 1.x API","try \"01:00:00:00\".toTimecode(at: ._24)","\/\/ 2.x API","\/\/ (removed)"]},{"text":"Enum Case Respellings","type":"heading","level":2,"anchor":"Enum-Case-Respellings"},{"inlineContent":[{"type":"text","text":"Some enum cases have been renamed to conform to lowerCamelCase and replace underscore prefixes."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/TimecodeFrameRate"},{"type":"text","text":" cases have been renamed."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"._24"},{"text":" is now ","type":"text"},{"code":".fps24","type":"codeVoice"},{"text":" and so on","type":"text"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/VideoFrameRate"},{"text":" cases have been renamed.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"._24p"},{"type":"text","text":" is now "},{"code":".fps24p","type":"codeVoice"},{"type":"text","text":" and so on"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/UpperLimit-swift.enum","type":"reference"},{"type":"text","text":" cases have been renamed."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"._24hours"},{"text":" is now ","type":"text"},{"type":"codeVoice","code":".max24Hours"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"._100days"},{"type":"text","text":" is now "},{"type":"codeVoice","code":".max100Days"}]}]}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/SubFramesBase-swift.enum","type":"reference"},{"type":"text","text":" cases have been renamed."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"._80SubFrames"},{"type":"text","text":" is now "},{"type":"codeVoice","code":".max80SubFrames"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"._100SubFrames","type":"codeVoice"},{"type":"text","text":" is now "},{"type":"codeVoice","code":".max100SubFrames"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/TimecodeFrameRate\/CompatibleGroup-swift.enum"},{"type":"text","text":" cases have been renamed."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":".NTSC","type":"codeVoice"},{"text":" is now ","type":"text"},{"type":"codeVoice","code":".ntscColor"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":".NTSC_drop","type":"codeVoice"},{"text":" is now ","type":"text"},{"code":".ntscDrop","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".ATSC"},{"text":" is now ","type":"text"},{"code":".whole","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".ATSC_drop"},{"text":" is now ","type":"text"},{"code":".ntscColorWallTime","type":"codeVoice"}]}]}]}]}]}]}],"variants":[{"paths":["\/documentation\/timecodekit\/timecodekit-2-migration-guide"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"abstract":[{"text":"API changes from TimecodeKit version 1 to version 2.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/TimecodeKit\/documentation\/TimecodeKit"]]},"seeAlsoSections":[{"title":"Welcome","generated":true,"identifiers":["doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Getting-Started"],"anchor":"Welcome"}],"kind":"article","references":{"timecode-init.png":{"identifier":"timecode-init.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/TimecodeKit\/timecode-init.png"}],"alt":"Timecode init"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/TimecodeFrameRate":{"abstract":[{"text":"Industry-standard BITC (burn-in timecode) display rates.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Certain rates may be drop-frame or non-drop-frame."}],"title":"TimecodeFrameRate","kind":"symbol","url":"\/documentation\/timecodekitcore\/timecodeframerate","type":"topic","role":"symbol","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/TimecodeFrameRate","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimecodeFrameRate","kind":"identifier"}]},"doc://TimecodeKitCore/documentation/TimecodeKitCore/TimecodeFrameRate/CompatibleGroup-swift.enum":{"type":"topic","title":"TimecodeFrameRate.CompatibleGroup","url":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CompatibleGroup","kind":"identifier"}],"abstract":[{"text":"Enum describing compatible groupings of frame rates.","type":"text"}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/TimecodeFrameRate\/CompatibleGroup-swift.enum","role":"symbol"},"#Time-Value-Types":{"title":"Time Value Types","type":"link","identifier":"#Time-Value-Types","url":"#Time-Value-Types","titleInlineContent":[{"type":"text","text":"Time Value Types"}]},"doc://TimecodeKitCore/documentation/TimecodeKitCore/VideoFrameRate":{"type":"topic","title":"VideoFrameRate","url":"\/documentation\/timecodekitcore\/videoframerate","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"VideoFrameRate","kind":"identifier"}],"abstract":[{"type":"text","text":"Industry-standard video frame rates."},{"text":" ","type":"text"},{"text":"Certain rates may be progressive or interleaved.","type":"text"}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/VideoFrameRate","role":"symbol"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode/SubFramesBase-swift.enum":{"abstract":[{"text":"Represents the base (denominator) used when dealing with subframes.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This defines how many equal parts a single frame may be divided up into."}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/SubFramesBase-swift.enum","type":"topic","url":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum","kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SubFramesBase","kind":"identifier"}],"title":"Timecode.SubFramesBase"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode/Properties-swift.struct":{"type":"topic","title":"Timecode.Properties","url":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Properties","kind":"identifier"}],"abstract":[{"isActive":true,"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode","type":"reference"},{"type":"text","text":" properties."}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/Properties-swift.struct","role":"symbol"},"doc://TimecodeKit/documentation/TimecodeKit":{"role":"collection","abstract":[{"type":"text","text":"Umbrella module that imports the entire TimecodeKit library. Contains a Getting Started guide."}],"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit","type":"topic","url":"\/documentation\/timecodekit","title":"TimecodeKit","kind":"symbol"},"#Timecode-Validation":{"title":"Timecode Validation","type":"link","identifier":"#Timecode-Validation","url":"#Timecode-Validation","titleInlineContent":[{"text":"Timecode Validation","type":"text"}]},"doc://TimecodeKit/documentation/TimecodeKit/Getting-Started":{"abstract":[{"type":"text","text":"Documentation and guides to get the most out of TimecodeKit."}],"title":"Getting Started","kind":"article","role":"article","identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Getting-Started","url":"\/documentation\/timecodekit\/getting-started","type":"topic"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode/UpperLimit-swift.enum":{"type":"topic","title":"Timecode.UpperLimit","url":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UpperLimit","kind":"identifier"}],"abstract":[{"text":"Enum describing the maximum timecode ceiling.","type":"text"}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/UpperLimit-swift.enum","role":"symbol"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode/stringValue(format:)":{"abstract":[{"text":"Returns the timecode’s string representation.","type":"text"}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/stringValue(format:)","type":"topic","url":"\/documentation\/timecodekitcore\/timecode\/stringvalue(format:)","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stringValue","kind":"identifier"},{"text":"(","kind":"text"},{"text":"format","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15TimecodeKitCore0A0V","text":"Timecode","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StringFormat","preciseIdentifier":"s:15TimecodeKitCore0A0V12StringFormata"},{"text":" = .default()) -> ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"title":"stringValue(format:)"}}}