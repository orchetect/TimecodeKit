{"abstract":[{"type":"text","text":"Performing mathematical calculations between timecodes."}],"primaryContentSections":[{"content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Math operations are possible by either methods or operators."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Addition and subtraction may be performed using two timecode operands to produce a timecode result."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode"},{"type":"text","text":" + "},{"type":"codeVoice","code":"Timecode"},{"type":"text","text":" = "},{"code":"Timecode","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Timecode","type":"codeVoice"},{"type":"text","text":" - "},{"type":"codeVoice","code":"Timecode"},{"text":" = ","type":"text"},{"code":"Timecode","type":"codeVoice"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Multiplication and division may be performed using one timecode operand and one floating-point number operand. This forms a calculation of timecode (position or duration) against a number of iterations or subdivisions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Multiplying timecode against timecode in order to produce a timecode result is not possible since it is ambiguous and considered undefined behavior.","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode"},{"text":" * ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":" = ","type":"text"},{"type":"codeVoice","code":"Timecode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Timecode","type":"codeVoice"},{"type":"text","text":" * "},{"type":"codeVoice","code":"Timecode"},{"type":"text","text":" is undefined and therefore not implemented"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Timecode"},{"type":"text","text":" \/ "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" = "},{"type":"codeVoice","code":"Timecode"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Timecode"},{"type":"text","text":" \/ "},{"code":"Timecode","type":"codeVoice"},{"type":"text","text":" = "},{"type":"codeVoice","code":"Double"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Arithmetic-Operators","text":"Arithmetic Operators","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Arithmetic operators are provided for convenience. These operators employ the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode\/ValidationRule\/wrapping"},{"type":"text","text":" validation rule in the event of underflows or overflows."}]},{"type":"codeListing","syntax":"swift","code":["let tc1 = try \"01:00:00:00\".timecode(at: .fps23_976)","let tc2 = try \"00:02:00:00\".timecode(at: .fps23_976)","","(tc1 + tc2).stringValue() \/\/ == \"01:02:00:00\"","(tc1 - tc2).stringValue() \/\/ == \"00:58:00:00\"","(tc1 * 2.0).stringValue() \/\/ == \"02:00:00:00\"","(tc1 \/ 2.0).stringValue() \/\/ == \"00:30:00:00\"","tc1 \/ tc2 \/\/ == 30.0"]},{"type":"heading","anchor":"Arithmetic-Methods","level":2,"text":"Arithmetic Methods"},{"type":"paragraph","inlineContent":[{"text":"Arithmetic methods follow the same behavior as ","type":"text"},{"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode","isActive":true,"type":"reference"},{"text":" initializers whereby the operation can be completed either using validation with a throwing call, or by using validation rules to constrain the result (See ","type":"text"},{"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode\/ValidationRule","isActive":true,"type":"reference"},{"text":").","type":"text"}]},{"inlineContent":[{"type":"text","text":"The right-hand operand may be a "},{"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode","type":"reference","isActive":true},{"type":"text","text":" instance, or any time source value."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"add()"},{"text":" \/ ","type":"text"},{"code":"adding()","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"subtract()"},{"type":"text","text":" \/ "},{"code":"subtracting()","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"multiply()"},{"text":" \/ ","type":"text"},{"type":"codeVoice","code":"multiplying()"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"divide()","type":"codeVoice"},{"text":" \/ ","type":"text"},{"type":"codeVoice","code":"dividing()"}]}]}]},{"syntax":"swift","code":["var tc1 = try \"01:00:00:00\".timecode(at: .fps23_976)","var tc2 = try \"00:00:02:00\".timecode(at: .fps23_976)","","\/\/ in-place mutation","try tc1.add(tc2)","try tc1.add(tc2, by: .wrapping) \/\/ using result validation rule","","\/\/ return a new instance","let tc3 = try tc1.adding(tc2)","let tc3 = try tc1.adding(tc2, by: .wrapping) \/\/ using result validation rule"],"type":"codeListing"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/timecodekit\/math"]}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode-Conversions","doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Rational-Numbers-and-CMTime","doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode-Interval","doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode-Transformer"],"title":"Math & Conversions"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/TimecodeKit\/documentation\/TimecodeKit"]]},"sections":[],"metadata":{"modules":[{"name":"TimecodeKit"}],"role":"article","roleHeading":"Article","title":"Math"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Math"},"references":{"doc://TimecodeKit/documentation/TimecodeKit":{"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit","type":"topic","abstract":[{"type":"text","text":"Value types for representing and working with SMPTE\/EBU timecode."}],"title":"TimecodeKit","url":"\/documentation\/timecodekit","kind":"symbol","role":"collection"},"doc://TimecodeKit/documentation/TimecodeKit/Timecode-Interval":{"type":"topic","identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode-Interval","url":"\/documentation\/timecodekit\/timecode-interval","kind":"article","role":"collectionGroup","abstract":[{"text":"Working with intervals between two timecodes.","type":"text"}],"title":"Timecode Interval"},"doc://TimecodeKit/documentation/TimecodeKit/Rational-Numbers-and-CMTime":{"url":"\/documentation\/timecodekit\/rational-numbers-and-cmtime","type":"topic","kind":"article","role":"collectionGroup","abstract":[{"text":"Using rational (fractional) time values and ","type":"text"},{"code":"CMTime","type":"codeVoice"},{"text":".","type":"text"}],"title":"Rational Numbers & CMTime","identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Rational-Numbers-and-CMTime"},"doc://TimecodeKit/documentation/TimecodeKit/Timecode/ValidationRule/wrapping":{"abstract":[{"text":"Wrap over or under the valid timecode range if necessary.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"wrapping","kind":"identifier"}],"url":"\/documentation\/timecodekit\/timecode\/validationrule\/wrapping","kind":"symbol","title":"Timecode.ValidationRule.wrapping","type":"topic","identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode\/ValidationRule\/wrapping"},"doc://TimecodeKit/documentation/TimecodeKit/Timecode-Transformer":{"url":"\/documentation\/timecodekit\/timecode-transformer","kind":"article","identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode-Transformer","role":"collectionGroup","type":"topic","abstract":[{"type":"text","text":"Using the timecode transformer facility."}],"title":"Timecode Transformer"},"doc://TimecodeKit/documentation/TimecodeKit/Timecode-Conversions":{"kind":"article","type":"topic","title":"Conversions","abstract":[{"text":"Converting various time values to\/from timecode.","type":"text"}],"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode-Conversions","url":"\/documentation\/timecodekit\/timecode-conversions","role":"article"},"doc://TimecodeKit/documentation/TimecodeKit/Timecode":{"url":"\/documentation\/timecodekit\/timecode","title":"Timecode","abstract":[{"text":"Value type representing SMPTE\/EBU timecode.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Timecode"}],"identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Timecode"}],"type":"topic"},"doc://TimecodeKit/documentation/TimecodeKit/Timecode/ValidationRule":{"type":"topic","navigatorTitle":[{"text":"ValidationRule","kind":"identifier"}],"url":"\/documentation\/timecodekit\/timecode\/validationrule","identifier":"doc:\/\/TimecodeKit\/documentation\/TimecodeKit\/Timecode\/ValidationRule","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"ValidationRule","kind":"identifier"}],"kind":"symbol","title":"Timecode.ValidationRule","abstract":[]}}}