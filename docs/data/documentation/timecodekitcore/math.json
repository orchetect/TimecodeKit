{"metadata":{"title":"Math","role":"article","modules":[{"name":"TimecodeKitCore"}],"roleHeading":"Article"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Math"},"abstract":[{"type":"text","text":"Performing mathematical calculations between timecodes."}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Math operations are possible by either methods or operators.","type":"text"}]},{"inlineContent":[{"text":"Addition and subtraction may be performed using two timecode operands to produce a timecode result.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"Timecode","type":"codeVoice"},{"type":"text","text":" + "},{"type":"codeVoice","code":"Timecode"},{"type":"text","text":" = "},{"type":"codeVoice","code":"Timecode"}]}]},{"content":[{"inlineContent":[{"code":"Timecode","type":"codeVoice"},{"text":" - ","type":"text"},{"type":"codeVoice","code":"Timecode"},{"text":" = ","type":"text"},{"code":"Timecode","type":"codeVoice"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Multiplication and division may be performed using one timecode operand and one floating-point number operand. This forms a calculation of timecode (position or duration) against a number of iterations or subdivisions.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Multiplying timecode against timecode in order to produce a timecode result is not possible since it is ambiguous and considered undefined behavior."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"Timecode"},{"type":"text","text":" * "},{"code":"Double","type":"codeVoice"},{"type":"text","text":" = "},{"type":"codeVoice","code":"Timecode"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Timecode","type":"codeVoice"},{"text":" * ","type":"text"},{"code":"Timecode","type":"codeVoice"},{"type":"text","text":" is undefined and therefore not implemented"}]}]},{"content":[{"inlineContent":[{"code":"Timecode","type":"codeVoice"},{"text":" \/ ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":" = ","type":"text"},{"type":"codeVoice","code":"Timecode"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"Timecode","type":"codeVoice"},{"text":" \/ ","type":"text"},{"type":"codeVoice","code":"Timecode"},{"text":" = ","type":"text"},{"code":"Double","type":"codeVoice"}],"type":"paragraph"}]}]},{"anchor":"Arithmetic-Operators","level":2,"text":"Arithmetic Operators","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Arithmetic operators are provided for convenience. These operators employ the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/ValidationRule\/wrapping","type":"reference"},{"text":" validation rule in the event of underflows or overflows.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let tc1 = try Timecode(.string(\"01:00:00:00\"), at: .fps23_976)","let tc2 = try Timecode(.string(\"00:02:00:00\"), at: .fps23_976)","","(tc1 + tc2).stringValue() \/\/ == \"01:02:00:00\"","(tc1 - tc2).stringValue() \/\/ == \"00:58:00:00\"","(tc1 * 2.0).stringValue() \/\/ == \"02:00:00:00\"","(tc1 \/ 2.0).stringValue() \/\/ == \"00:30:00:00\"","tc1 \/ tc2 \/\/ == 30.0"]},{"anchor":"Arithmetic-Methods","level":2,"type":"heading","text":"Arithmetic Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Arithmetic methods follow the same behavior as "},{"isActive":true,"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode"},{"type":"text","text":" initializers whereby the operation can be completed either using validation with a throwing call, or by using validation rules to constrain the result (See "},{"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/ValidationRule","isActive":true},{"type":"text","text":")."}]},{"inlineContent":[{"text":"The right-hand operand may be a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode"},{"type":"text","text":" instance, or any time source value."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"add()","type":"codeVoice"},{"type":"text","text":" \/ "},{"type":"codeVoice","code":"adding()"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"subtract()"},{"type":"text","text":" \/ "},{"type":"codeVoice","code":"subtracting()"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"multiply()"},{"type":"text","text":" \/ "},{"type":"codeVoice","code":"multiplying()"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"divide()"},{"type":"text","text":" \/ "},{"type":"codeVoice","code":"dividing()"}]}]}]},{"code":["var tc1 = try Timecode(.string(\"01:00:00:00\"), at: .fps23_976)","var tc2 = try Timecode(.string(\"00:00:02:00\"), at: .fps23_976)","","\/\/ in-place mutation","try tc1.add(tc2)","try tc1.add(tc2, by: .wrapping) \/\/ using result validation rule","","\/\/ return a new instance","let tc3 = try tc1.adding(tc2)","let tc3 = try tc1.adding(tc2, by: .wrapping) \/\/ using result validation rule"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/timecodekitcore\/math"]}],"seeAlsoSections":[{"title":"Math & Conversions","generated":true,"anchor":"Math--Conversions","identifiers":["doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode-Conversions","doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Rational-Numbers-and-CMTime","doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode-Interval","doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/TimecodeTransformer"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore"]]},"references":{"doc://TimecodeKitCore/documentation/TimecodeKitCore":{"abstract":[{"text":"Value types and related logic for representing and working with SMPTE\/EBU timecode.","type":"text"}],"type":"topic","kind":"symbol","role":"collection","title":"TimecodeKitCore","url":"\/documentation\/timecodekitcore","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode-Conversions":{"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode-Conversions","title":"Conversions","abstract":[{"text":"Converting various time values to\/from timecode.","type":"text"}],"role":"article","kind":"article","url":"\/documentation\/timecodekitcore\/timecode-conversions","type":"topic"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/TimecodeTransformer":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimecodeTransformer"}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/TimecodeTransformer","type":"topic","url":"\/documentation\/timecodekitcore\/timecodetransformer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TimecodeTransformer"}],"title":"TimecodeTransformer","abstract":[{"text":"A timecode transformer containing one or more transform rules in series.","type":"text"}]},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode/ValidationRule":{"role":"symbol","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/ValidationRule","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValidationRule","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ValidationRule"}],"abstract":[],"type":"topic","kind":"symbol","url":"\/documentation\/timecodekitcore\/timecode\/validationrule","title":"Timecode.ValidationRule"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode-Interval":{"title":"Timecode Interval","url":"\/documentation\/timecodekitcore\/timecode-interval","abstract":[{"type":"text","text":"Working with intervals between two timecodes."}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode-Interval","kind":"article","role":"collectionGroup","type":"topic"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Rational-Numbers-and-CMTime":{"url":"\/documentation\/timecodekitcore\/rational-numbers-and-cmtime","type":"topic","kind":"article","abstract":[{"text":"Using rational (fractional) time values and ","type":"text"},{"type":"codeVoice","code":"CMTime"},{"text":".","type":"text"}],"identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Rational-Numbers-and-CMTime","title":"Rational Numbers & CMTime","role":"collectionGroup"},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode":{"abstract":[{"type":"text","text":"Value type representing SMPTE\/EBU timecode."}],"role":"symbol","title":"Timecode","kind":"symbol","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode","navigatorTitle":[{"kind":"identifier","text":"Timecode"}],"url":"\/documentation\/timecodekitcore\/timecode","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Timecode","kind":"identifier"}]},"doc://TimecodeKitCore/documentation/TimecodeKitCore/Timecode/ValidationRule/wrapping":{"title":"Timecode.ValidationRule.wrapping","kind":"symbol","url":"\/documentation\/timecodekitcore\/timecode\/validationrule\/wrapping","identifier":"doc:\/\/TimecodeKitCore\/documentation\/TimecodeKitCore\/Timecode\/ValidationRule\/wrapping","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"wrapping","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Wrap over or under the valid timecode range if necessary."}],"type":"topic"}}}