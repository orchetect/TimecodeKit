{"interfaceLanguages":{"swift":[{"path":"\/documentation","title":"TimecodeKit","children":[{"title":"TimecodeKitCore","children":[{"title":"Timecode","type":"groupMarker"},{"title":"Timecode","path":"\/documentation\/timecodekitcore\/timecode","type":"struct","children":[{"title":"Constructors","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode-constructors","title":"Constructors","type":"symbol","children":[{"type":"groupMarker","title":"Source Value"},{"type":"init","title":"init(TimecodeSourceValue, using: Timecode.Properties) throws","path":"\/documentation\/timecodekitcore\/timecode\/init(_:using:)-7x46s"},{"title":"init(TimecodeSourceValue, using: Timecode.Properties, by: Timecode.ValidationRule)","path":"\/documentation\/timecodekitcore\/timecode\/init(_:using:by:)-19laj","type":"init"},{"type":"init","path":"\/documentation\/timecodekitcore\/timecode\/init(_:at:base:limit:)-6eprh","title":"init(TimecodeSourceValue, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) throws"},{"title":"init(TimecodeSourceValue, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit, by: Timecode.ValidationRule)","path":"\/documentation\/timecodekitcore\/timecode\/init(_:at:base:limit:by:)-7daaz","type":"init"},{"title":"Async Source Value","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/init(_:using:)-2obvr","title":"init(AsyncTimecodeSourceValue, using: Timecode.Properties) async throws","type":"init"},{"path":"\/documentation\/timecodekitcore\/timecode\/init(_:using:by:)-978c3","title":"init(AsyncTimecodeSourceValue, using: Timecode.Properties, by: Timecode.ValidationRule) async","type":"init"},{"path":"\/documentation\/timecodekitcore\/timecode\/init(_:at:base:limit:)-45ucr","title":"init(AsyncTimecodeSourceValue, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) async throws","type":"init"},{"type":"init","title":"init(AsyncTimecodeSourceValue, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit, by: Timecode.ValidationRule) async","path":"\/documentation\/timecodekitcore\/timecode\/init(_:at:base:limit:by:)-7k12n"},{"title":"Guaranteed Source Value","type":"groupMarker"},{"title":"init(GuaranteedTimecodeSourceValue, using: Timecode.Properties)","type":"init","path":"\/documentation\/timecodekitcore\/timecode\/init(_:using:)-5hu6e"},{"title":"init(GuaranteedTimecodeSourceValue, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit)","path":"\/documentation\/timecodekitcore\/timecode\/init(_:at:base:limit:)-dux2","type":"init"},{"title":"Rich Source Value","type":"groupMarker"},{"type":"init","path":"\/documentation\/timecodekitcore\/timecode\/init(_:)-60nf9","title":"init(RichTimecodeSourceValue) throws"},{"type":"init","title":"init(RichTimecodeSourceValue, by: Timecode.ValidationRule)","path":"\/documentation\/timecodekitcore\/timecode\/init(_:by:)"},{"title":"Async Rich Source Value","type":"groupMarker"},{"title":"init(AsyncRichTimecodeSourceValue) async throws","type":"init","path":"\/documentation\/timecodekitcore\/timecode\/init(_:)-w15o"},{"type":"groupMarker","title":"Guaranteed Rich Source Value"},{"title":"init(GuaranteedRichTimecodeSourceValue)","type":"init","path":"\/documentation\/timecodekitcore\/timecode\/init(_:)-5xi0q"},{"title":"Formatted Source Value","type":"groupMarker"},{"type":"init","title":"init(FormattedTimecodeSourceValue, using: Timecode.Properties) throws","path":"\/documentation\/timecodekitcore\/timecode\/init(_:using:)-2fc6x"},{"title":"init(FormattedTimecodeSourceValue, using: Timecode.Properties, by: Timecode.ValidationRule) throws","path":"\/documentation\/timecodekitcore\/timecode\/init(_:using:by:)-xil6","type":"init"},{"title":"init(FormattedTimecodeSourceValue, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) throws","type":"init","path":"\/documentation\/timecodekitcore\/timecode\/init(_:at:base:limit:)-6vxuh"},{"title":"init(FormattedTimecodeSourceValue, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit, by: Timecode.ValidationRule) throws","path":"\/documentation\/timecodekitcore\/timecode\/init(_:at:base:limit:by:)-7p0j2","type":"init"}]},{"type":"groupMarker","title":"Components"},{"children":[{"type":"groupMarker","title":"Component Values"},{"type":"property","title":"var days: Int","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/days"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/hours","title":"var hours: Int","type":"property"},{"title":"var minutes: Int","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/minutes"},{"title":"var seconds: Int","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/seconds","type":"property"},{"type":"property","title":"var frames: Int","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/frames"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/subframes","title":"var subFrames: Int"},{"type":"groupMarker","title":"Initializer"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/init(d:h:m:s:f:sf:)","title":"init(d: Int, h: Int, m: Int, s: Int, f: Int, sf: Int)","type":"init"},{"title":"Static Constructors","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/zero","title":"static let zero: Timecode.Components","type":"property"},{"title":"static func random(using: Timecode.Properties) -> Timecode.Components","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/random(using:)","type":"method"},{"type":"method","title":"static func random(in: Timecode.ComponentRanges) -> Timecode.Components","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/random(in:)"},{"type":"groupMarker","title":"Array"},{"title":"init([(component: Timecode.Component, value: Int)])","type":"init","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/init(_:)-8i9vr"},{"title":"var array: [(component: Timecode.Component, value: Int)]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/array","type":"property"},{"type":"groupMarker","title":"Dictionary"},{"type":"init","title":"init([Timecode.Component : Int])","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/init(_:)-7z48q"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/dictionary","type":"property","title":"var dictionary: [Timecode.Component : Int]"},{"title":"Validation","type":"groupMarker"},{"type":"method","title":"func isWithinValidDigitCounts(at: TimecodeFrameRate, base: Timecode.SubFramesBase) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/iswithinvaliddigitcounts(at:base:)"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/validrange(of:using:)","type":"method","title":"func validRange(of: Timecode.Component, using: Timecode.Properties) -> ClosedRange<Int>"},{"title":"func validRange(of: Timecode.Component, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) -> ClosedRange<Int>","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/validrange(of:at:base:limit:)","type":"method"},{"children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(days: ClosedRange<Int>, hours: ClosedRange<Int>, minutes: ClosedRange<Int>, seconds: ClosedRange<Int>, frames: ClosedRange<Int>, subFrames: ClosedRange<Int>)","type":"init","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/init(days:hours:minutes:seconds:frames:subframes:)"},{"title":"Instance Properties","type":"groupMarker"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/days","title":"var days: ClosedRange<Int>"},{"path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/frames","type":"property","title":"var frames: ClosedRange<Int>"},{"title":"var hours: ClosedRange<Int>","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/hours"},{"title":"var minutes: ClosedRange<Int>","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/minutes","type":"property"},{"title":"var seconds: ClosedRange<Int>","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/seconds"},{"title":"var subFrames: ClosedRange<Int>","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/subframes"},{"title":"Type Properties","type":"groupMarker"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/unsaferandomranges","title":"static let unsafeRandomRanges: Timecode.ComponentRanges"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}],"type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/equatable-implementations","title":"Equatable Implementations"}],"type":"struct","path":"\/documentation\/timecodekitcore\/timecode\/componentranges","title":"Timecode.ComponentRanges"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","title":"Decodable Implementations","children":[{"type":"groupMarker","title":"Initializers"},{"title":"init(from: any Decoder) throws","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/init(from:)","type":"init"}],"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/decodable-implementations"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/equatable-implementations","children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}],"type":"symbol","title":"Equatable Implementations"},{"title":"Identifiable Implementations","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/identifiable-implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var id: Timecode.Components","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/id"}],"type":"symbol"},{"type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/sequence-implementations","title":"Sequence Implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"title":"var lazy: LazySequence<Self>","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/lazy"},{"type":"property","title":"var publisher: Publishers.Sequence<Self, Never>","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/publisher"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/underestimatedcount","type":"property","title":"var underestimatedCount: Int"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/compactmap(_:)"},{"title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/compare(_:_:)"},{"title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/contains(where:)","type":"method"},{"type":"method","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/count(where:)"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/dropfirst(_:)","type":"method","title":"func dropFirst(Int) -> DropFirstSequence<Self>"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/droplast(_:)","type":"method","title":"func dropLast(Int) -> [Self.Element]"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/filter(_:)-3b356"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/filter(_:)-8dxjy","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]"},{"title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/first(where:)"},{"title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/flatmap(_:)-19siu","type":"method"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/flatmap(_:)-1uidb","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/formatted(_:)","type":"method","title":"func formatted<S>(S) -> S.FormatOutput"},{"title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/lexicographicallyprecedes(_:by:)","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/makeiterator()","type":"method","title":"func makeIterator() -> IndexingIterator<[(component: Timecode.Component, value: Int)]>"},{"type":"method","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/map(_:)"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"type":"method","title":"func prefix(Int) -> PrefixSequence<Self>","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/prefix(_:)"},{"title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/prefix(while:)","type":"method"},{"type":"method","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/reduce(_:_:)"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/reduce(into:_:)","type":"method","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result"},{"title":"func reversed() -> [Self.Element]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/reversed()","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/shuffled()","type":"method","title":"func shuffled() -> [Self.Element]"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]"},{"type":"method","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/sorted(by:)"},{"type":"method","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/sorted(using:)-6mxx2"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/sorted(using:)-w15h","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","type":"method","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]"},{"title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/starts(with:by:)","type":"method"},{"title":"func suffix(Int) -> [Self.Element]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/suffix(_:)","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/withcontiguousstorageifavailable(_:)","type":"method","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?"}]}],"title":"Timecode.Components","type":"struct","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct"},{"title":"var components: Timecode.Components","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.property","type":"property"},{"title":"var days: Int","path":"\/documentation\/timecodekitcore\/timecode\/days","type":"property"},{"title":"var hours: Int","path":"\/documentation\/timecodekitcore\/timecode\/hours","type":"property"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/minutes","title":"var minutes: Int"},{"title":"var seconds: Int","path":"\/documentation\/timecodekitcore\/timecode\/seconds","type":"property"},{"path":"\/documentation\/timecodekitcore\/timecode\/frames","title":"var frames: Int","type":"property"},{"title":"var subFrames: Int","path":"\/documentation\/timecodekitcore\/timecode\/subframes","type":"property"},{"type":"enum","title":"Timecode.Component","path":"\/documentation\/timecodekitcore\/timecode\/component","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"title":"case days","path":"\/documentation\/timecodekitcore\/timecode\/component\/days","type":"case"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/frames","type":"case","title":"case frames"},{"title":"case hours","path":"\/documentation\/timecodekitcore\/timecode\/component\/hours","type":"case"},{"title":"case minutes","path":"\/documentation\/timecodekitcore\/timecode\/component\/minutes","type":"case"},{"title":"case seconds","type":"case","path":"\/documentation\/timecodekitcore\/timecode\/component\/seconds"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/subframes","title":"case subFrames","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var nameCapitalized: String","path":"\/documentation\/timecodekitcore\/timecode\/component\/namecapitalized"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/namelowercamelcase","title":"var nameLowerCamelCase: String","type":"property"},{"title":"var nameLowercased: String","path":"\/documentation\/timecodekitcore\/timecode\/component\/namelowercased","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/next(excluding:wrap:)","type":"method","title":"func next(excluding: Set<Timecode.Component>, wrap: Bool) -> Timecode.Component"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/numberofdigits(at:base:)","type":"method","title":"func numberOfDigits(at: TimecodeFrameRate, base: Timecode.SubFramesBase) -> Int"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/previous(excluding:wrap:)","type":"method","title":"func previous(excluding: Set<Timecode.Component>, wrap: Bool) -> Timecode.Component"},{"title":"Type Methods","type":"groupMarker"},{"type":"method","title":"static func first(excluding: Set<Timecode.Component>) -> Timecode.Component","path":"\/documentation\/timecodekitcore\/timecode\/component\/first(excluding:)"},{"type":"method","title":"static func last(excluding: Set<Timecode.Component>) -> Timecode.Component","path":"\/documentation\/timecodekitcore\/timecode\/component\/last(excluding:)"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"type":"groupMarker","title":"Operators"},{"type":"op","path":"\/documentation\/timecodekitcore\/timecode\/component\/'...(_:)-31gyf","title":"static func ... (Self) -> PartialRangeFrom<Self>"},{"type":"op","title":"static func ... (Self) -> PartialRangeThrough<Self>","path":"\/documentation\/timecodekitcore\/timecode\/component\/'...(_:)-9r7ip"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"title":"static func ..< (Self) -> PartialRangeUpTo<Self>","path":"\/documentation\/timecodekitcore\/timecode\/component\/'.._(_:)","type":"op"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/'.._(_:_:)","type":"op","title":"static func ..< (Self, Self) -> Range<Self>"},{"type":"op","path":"\/documentation\/timecodekitcore\/timecode\/component\/_(_:_:)","title":"static func < (Timecode.Component, Timecode.Component) -> Bool"},{"title":"static func > (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/component\/_(_:_:)-93z5n","type":"op"},{"title":"static func >= (Self, Self) -> Bool","type":"op","path":"\/documentation\/timecodekitcore\/timecode\/component\/_=(_:_:)-5xhta"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/_=(_:_:)-6k9ws","type":"op","title":"static func <= (Self, Self) -> Bool"}],"type":"symbol","title":"Comparable Implementations","path":"\/documentation\/timecodekitcore\/timecode\/component\/comparable-implementations"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"title":"Equatable Implementations","type":"symbol"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitcore\/timecode\/component\/id","type":"property","title":"var id: Timecode.Component"}]}]},{"type":"groupMarker","title":"Properties"},{"title":"Timecode.Properties","type":"struct","path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct","children":[{"title":"Initializers","type":"groupMarker"},{"type":"init","title":"init(rate: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit)","path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/init(rate:base:limit:)"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/framerate","title":"var frameRate: TimecodeFrameRate","type":"property"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/subframesbase","title":"var subFramesBase: Timecode.SubFramesBase"},{"path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/upperlimit","title":"var upperLimit: Timecode.UpperLimit","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/decodable-implementations","children":[{"type":"groupMarker","title":"Initializers"},{"title":"init(from: any Decoder) throws","type":"init","path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/init(from:)"}],"title":"Decodable Implementations","type":"symbol"},{"path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/equatable-implementations","title":"Equatable Implementations","children":[{"type":"groupMarker","title":"Operators"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/!=(_:_:)","type":"op"}],"type":"symbol"}]},{"title":"var properties: Timecode.Properties","path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.property","type":"property"},{"title":"Frame Rate","type":"groupMarker"},{"title":"var frameRate: TimecodeFrameRate","path":"\/documentation\/timecodekitcore\/timecode\/framerate","type":"property"},{"title":"Subframes Base","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum","type":"enum","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"title":"case max100SubFrames","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/max100subframes","type":"case"},{"title":"case max80SubFrames","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/max80subframes","type":"case"},{"path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/quarterframes","type":"case","title":"case quarterFrames"},{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/init(rawvalue:)","type":"init","title":"init?(rawValue: Int)"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/numberofdigits","type":"property","title":"var numberOfDigits: Int"},{"title":"var stringValueVerbose: String","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/stringvalueverbose","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func convert(subFrames: Int, to: Timecode.SubFramesBase) -> Int","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/convert(subframes:to:)","type":"method"},{"type":"groupMarker","title":"Type Methods"},{"title":"static func `default`() -> Timecode.SubFramesBase","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/default()","type":"method"},{"type":"groupMarker","title":"Default Implementations"},{"title":"CustomStringConvertible Implementations","type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/customstringconvertible-implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var description: String","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/description"}]},{"type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/equatable-implementations","title":"Equatable Implementations","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","type":"op","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/!=(_:_:)"}]},{"title":"Identifiable Implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/id","title":"var id: Timecode.SubFramesBase"}],"path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/identifiable-implementations","type":"symbol"},{"title":"RawRepresentable Implementations","type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var hashValue: Int","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/hashvalue"},{"type":"groupMarker","title":"Instance Methods"},{"title":"func encode(to: any Encoder) throws","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/encode(to:)","type":"method"},{"title":"func hash(into: inout Hasher)","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/hash(into:)"}],"path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.enum\/rawrepresentable-implementations"}],"title":"Timecode.SubFramesBase"},{"path":"\/documentation\/timecodekitcore\/timecode\/subframesbase-swift.property","title":"var subFramesBase: Timecode.SubFramesBase","type":"property"},{"type":"groupMarker","title":"Upper Limit"},{"type":"enum","title":"Timecode.UpperLimit","children":[{"type":"groupMarker","title":"Enumeration Cases"},{"title":"case max100Days","path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum\/max100days","type":"case"},{"title":"case max24Hours","path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum\/max24hours","type":"case"},{"type":"groupMarker","title":"Initializers"},{"title":"init?(rawValue: String)","path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum\/init(rawvalue:)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"title":"Equatable Implementations","type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool"}]},{"type":"symbol","title":"Identifiable Implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var id: Timecode.UpperLimit","path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum\/id","type":"property"}],"path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum\/identifiable-implementations"},{"children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum\/init(from:)","title":"init(from: any Decoder) throws"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var hashValue: Int","path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum\/hashvalue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum\/encode(to:)","type":"method","title":"func encode(to: any Encoder) throws"},{"path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum\/rawrepresentable-implementations","type":"symbol","title":"RawRepresentable Implementations"}],"path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.enum"},{"path":"\/documentation\/timecodekitcore\/timecode\/upperlimit-swift.property","type":"property","title":"var upperLimit: Timecode.UpperLimit"},{"type":"groupMarker","title":"Frame Count"},{"title":"Timecode.FrameCount","type":"struct","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/*(_:_:)","type":"op","title":"static func * (Timecode.FrameCount, Double) -> Timecode.FrameCount"},{"type":"op","title":"static func + (Timecode.FrameCount, Timecode.FrameCount) -> Timecode.FrameCount","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/+(_:_:)"},{"title":"static func - (Timecode.FrameCount, Timecode.FrameCount) -> Timecode.FrameCount","type":"op","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/-(_:_:)"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/_(_:_:)-8tel4","type":"op","title":"static func \/ (Timecode.FrameCount, Double) -> Timecode.FrameCount"},{"type":"groupMarker","title":"Initializers"},{"title":"init(Timecode.FrameCount.Value, base: Timecode.SubFramesBase)","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/init(_:base:)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/decimalvalue","title":"var decimalValue: Decimal","type":"property"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/doublevalue","title":"var doubleValue: Double","type":"property"},{"title":"var isNegative: Bool","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/isnegative","type":"property"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/iszero","title":"var isZero: Bool"},{"title":"var subFrames: Int","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/subframes"},{"title":"let subFramesBase: Timecode.SubFramesBase","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/subframesbase","type":"property"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.property","title":"var value: Timecode.FrameCount.Value"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/wholeframes","title":"var wholeFrames: Int"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/adding(_:)","type":"method","title":"func adding(Timecode.FrameCount) -> Timecode.FrameCount"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/dividing(by:)","title":"func dividing(by: Double) -> Timecode.FrameCount","type":"method"},{"title":"func multiplying(by: Double) -> Timecode.FrameCount","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/multiplying(by:)"},{"type":"method","title":"func subtracting(Timecode.FrameCount) -> Timecode.FrameCount","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/subtracting(_:)"},{"title":"Enumerations","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum","title":"Timecode.FrameCount.Value","children":[{"type":"groupMarker","title":"Enumeration Cases"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/combined(frames:)","title":"case combined(frames: Double)","type":"case"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/frames(_:)","type":"case","title":"case frames(Int)"},{"title":"case split(frames: Int, subFrames: Int)","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/split(frames:subframes:)","type":"case"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/splitunitinterval(frames:subframesunitinterval:)","title":"case splitUnitInterval(frames: Int, subFramesUnitInterval: Double)","type":"case"},{"type":"groupMarker","title":"Instance Properties"},{"title":"var isZero: Bool","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/iszero","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"type":"symbol","title":"CustomDebugStringConvertible Implementations","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/customdebugstringconvertible-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/debugdescription","type":"property","title":"var debugDescription: String"}]},{"title":"CustomStringConvertible Implementations","type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/customstringconvertible-implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/description","title":"var description: String"}]},{"title":"Equatable Implementations","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/equatable-implementations","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","type":"op","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/!=(_:_:)"}],"type":"symbol"},{"title":"Identifiable Implementations","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/identifiable-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/value-swift.enum\/id","title":"var id: Timecode.FrameCount.Value"}],"type":"symbol"}],"type":"enum"},{"type":"groupMarker","title":"Default Implementations"},{"children":[{"title":"Operators","type":"groupMarker"},{"title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/'...(_:)-35v9t"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/'...(_:)-95hav","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"title":"static func ... (Self, Self) -> ClosedRange<Self>","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/'...(_:_:)","type":"op"},{"type":"op","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>"},{"title":"static func ..< (Self, Self) -> Range<Self>","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/'.._(_:_:)","type":"op"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/_(_:_:)-2nx17","type":"op","title":"static func < (Timecode.FrameCount, Timecode.FrameCount) -> Bool"},{"type":"op","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/_(_:_:)-5vd37","title":"static func > (Timecode.FrameCount, Timecode.FrameCount) -> Bool"},{"title":"static func > (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/_(_:_:)-7s9cx","type":"op"},{"type":"op","title":"static func <= (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/_=(_:_:)-5xq18"},{"type":"op","title":"static func >= (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/_=(_:_:)-62ss6"}],"title":"Comparable Implementations","type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/comparable-implementations"},{"title":"CustomStringConvertible Implementations","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/customstringconvertible-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"title":"var description: String","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/description"}],"type":"symbol"},{"type":"symbol","title":"Equatable Implementations","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/!=(_:_:)","type":"op"},{"type":"op","title":"static func == (Timecode.FrameCount, Timecode.FrameCount) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/==(_:_:)"}]},{"type":"symbol","children":[{"title":"Instance Methods","type":"groupMarker"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/hash(into:)","title":"func hash(into: inout Hasher)"}],"title":"Hashable Implementations","path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/hashable-implementations"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/identifiable-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct\/id","title":"var id: Timecode.FrameCount","type":"property"}],"title":"Identifiable Implementations","type":"symbol"}],"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.struct"},{"path":"\/documentation\/timecodekitcore\/timecode\/framecount-swift.property","type":"property","title":"var frameCount: Timecode.FrameCount"},{"title":"var maxFrameCountExpressible: Timecode.FrameCount","path":"\/documentation\/timecodekitcore\/timecode\/maxframecountexpressible","type":"property"},{"path":"\/documentation\/timecodekitcore\/timecode\/maxsubframesexpressible","type":"property","title":"var maxSubFramesExpressible: Int"},{"path":"\/documentation\/timecodekitcore\/timecode\/maxsubframecountexpressible","type":"property","title":"var maxSubFrameCountExpressible: Int"},{"type":"groupMarker","title":"Timecode String"},{"children":[{"title":"Options","type":"groupMarker"},{"children":[{"type":"groupMarker","title":"Enumeration Cases"},{"title":"case alwaysShowDays","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/alwaysshowdays","type":"case"},{"type":"case","title":"case filenameCompatible","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/filenamecompatible"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/showsubframes","title":"case showSubFrames","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/init(from:)","type":"init","title":"init(from: any Decoder) throws"}],"title":"Decodable Implementations","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/decodable-implementations","type":"symbol"},{"title":"Encodable Implementations","children":[{"type":"groupMarker","title":"Instance Methods"},{"title":"func encode(to: any Encoder) throws","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/encode(to:)"}],"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/encodable-implementations","type":"symbol"},{"title":"Equatable Implementations","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func != (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/!=(_:_:)"}],"type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/equatable-implementations"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var id: Timecode.StringFormatOption","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/id","type":"property"}],"type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/identifiable-implementations","title":"Identifiable Implementations"}],"title":"Timecode.StringFormatOption","type":"enum","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption"},{"title":"Convenience Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/swift\/set\/alwaysshowdays","type":"property","title":"var alwaysShowDays: Bool"},{"title":"var filenameCompatible: Bool","path":"\/documentation\/timecodekitcore\/swift\/set\/filenamecompatible","type":"property"},{"title":"var showSubFrames: Bool","path":"\/documentation\/timecodekitcore\/swift\/set\/showsubframes","type":"property"},{"title":"Default Options","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/swift\/set\/default()","title":"static func `default`() -> Set<Element>","type":"method"}],"title":"Timecode.StringFormat","type":"typealias","path":"\/documentation\/timecodekitcore\/timecode\/stringformat"},{"title":"Timecode.StringFormatOption","children":[{"type":"groupMarker","title":"Enumeration Cases"},{"type":"case","title":"case alwaysShowDays","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/alwaysshowdays"},{"type":"case","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/filenamecompatible","title":"case filenameCompatible"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/showsubframes","title":"case showSubFrames","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/decodable-implementations","title":"Decodable Implementations","type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"type":"init","title":"init(from: any Decoder) throws","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/init(from:)"}]},{"children":[{"type":"groupMarker","title":"Instance Methods"},{"title":"func encode(to: any Encoder) throws","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/encode(to:)","type":"method"}],"title":"Encodable Implementations","type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/encodable-implementations"},{"type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/equatable-implementations","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","type":"op","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/!=(_:_:)"}],"title":"Equatable Implementations"},{"children":[{"type":"groupMarker","title":"Instance Properties"},{"title":"var id: Timecode.StringFormatOption","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/id","type":"property"}],"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"}],"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption","type":"enum"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/stringvalue(format:)","title":"func stringValue(format: Timecode.StringFormat) -> String"},{"title":"var stringValueVerbose: String","path":"\/documentation\/timecodekitcore\/timecode\/stringvalueverbose","type":"property"},{"title":"Conversion","type":"groupMarker"},{"title":"func converted(to: TimecodeFrameRate, base: Timecode.SubFramesBase?, preservingValues: Bool) throws -> Timecode","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/converted(to:base:preservingvalues:)"},{"type":"property","title":"var cmTimeValue: CMTime","path":"\/documentation\/timecodekitcore\/timecode\/cmtimevalue"},{"path":"\/documentation\/timecodekitcore\/timecode\/feetandframesvalue","type":"property","title":"var feetAndFramesValue: FeetAndFrames"},{"type":"property","title":"var rationalValue: Fraction","path":"\/documentation\/timecodekitcore\/timecode\/rationalvalue"},{"title":"var realTimeValue: TimeInterval","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/realtimevalue"},{"path":"\/documentation\/timecodekitcore\/timecode\/samplesvalue(samplerate:)","type":"method","title":"func samplesValue(sampleRate: Int) -> Int"},{"path":"\/documentation\/timecodekitcore\/timecode\/samplesdoublevalue(samplerate:)","type":"method","title":"func samplesDoubleValue(sampleRate: Int) -> Double"},{"type":"groupMarker","title":"Setting Timecode"},{"children":[{"title":"Source Value","type":"groupMarker"},{"title":"func set(TimecodeSourceValue) throws","path":"\/documentation\/timecodekitcore\/timecode\/set(_:)-7h1e3","type":"method"},{"title":"func set(TimecodeSourceValue, by: Timecode.ValidationRule)","path":"\/documentation\/timecodekitcore\/timecode\/set(_:by:)-924y6","type":"method"},{"title":"func setting(TimecodeSourceValue) throws -> Timecode","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/setting(_:)-8fycr"},{"type":"method","title":"func setting(TimecodeSourceValue, by: Timecode.ValidationRule) -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/setting(_:by:)-4xxpr"},{"title":"Async Source Value","type":"groupMarker"},{"title":"func set(AsyncTimecodeSourceValue) async throws","path":"\/documentation\/timecodekitcore\/timecode\/set(_:)-78azr","type":"method"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/set(_:by:)-6pcmt","title":"func set(AsyncTimecodeSourceValue, by: Timecode.ValidationRule) async"},{"title":"func setting(AsyncTimecodeSourceValue) async throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/setting(_:)-3p2sr","type":"method"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/setting(_:by:)-9bsvo","title":"func setting(AsyncTimecodeSourceValue, by: Timecode.ValidationRule) async -> Timecode"},{"type":"groupMarker","title":"Guaranteed Source Value"},{"title":"func set(GuaranteedTimecodeSourceValue)","path":"\/documentation\/timecodekitcore\/timecode\/set(_:)-2nzja","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/setting(_:)-7duyt","title":"func setting(GuaranteedTimecodeSourceValue) -> Timecode","type":"method"},{"title":"Rich Source Value","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/set(_:)-1zpbl","title":"func set(RichTimecodeSourceValue) throws","type":"method"},{"title":"func set(RichTimecodeSourceValue, by: Timecode.ValidationRule)","path":"\/documentation\/timecodekitcore\/timecode\/set(_:by:)-8094b","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/setting(_:)-9wz6a","type":"method","title":"func setting(RichTimecodeSourceValue) throws -> Timecode"},{"title":"func setting(RichTimecodeSourceValue, by: Timecode.ValidationRule) -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/setting(_:by:)-4atep","type":"method"},{"type":"groupMarker","title":"Async Rich Source Value"},{"title":"func set(AsyncRichTimecodeSourceValue) async throws","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/set(_:)-5uzz"},{"title":"func setting(AsyncRichTimecodeSourceValue) async throws -> Timecode","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/setting(_:)-5tip1"},{"type":"groupMarker","title":"Guaranteed Rich Source Value"},{"path":"\/documentation\/timecodekitcore\/timecode\/set(_:)-1qlc2","title":"func set(GuaranteedRichTimecodeSourceValue) -> Timecode.Properties","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/setting(_:)-3evhh","title":"func setting(GuaranteedRichTimecodeSourceValue) -> Timecode","type":"method"},{"type":"groupMarker","title":"Formatted Source Value"},{"type":"method","title":"func set(FormattedTimecodeSourceValue) throws","path":"\/documentation\/timecodekitcore\/timecode\/set(_:)-3il64"},{"type":"method","title":"func set(FormattedTimecodeSourceValue, by: Timecode.ValidationRule) throws","path":"\/documentation\/timecodekitcore\/timecode\/set(_:by:)-2wk8a"},{"path":"\/documentation\/timecodekitcore\/timecode\/setting(_:)-37k7d","type":"method","title":"func setting(FormattedTimecodeSourceValue) throws -> Timecode"},{"title":"func setting(FormattedTimecodeSourceValue, by: Timecode.ValidationRule) throws -> Timecode","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/setting(_:by:)-8zidz"}],"path":"\/documentation\/timecodekitcore\/timecode-set","title":"Setting Timecode","type":"symbol"},{"type":"groupMarker","title":"Math"},{"children":[{"title":"Addition","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/add(_:)-35dhi","title":"func add(Timecode) throws","type":"method"},{"title":"func add(Timecode, by: Timecode.ValidationRule) throws","path":"\/documentation\/timecodekitcore\/timecode\/add(_:by:)-1z454","type":"method"},{"title":"func add(Timecode.Components) throws","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/add(_:)-915h3"},{"title":"func add(Timecode.Components, by: Timecode.ValidationRule)","path":"\/documentation\/timecodekitcore\/timecode\/add(_:by:)-1m7ah","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/add(_:)-9ru9i","type":"method","title":"func add(TimecodeSourceValue) throws"},{"path":"\/documentation\/timecodekitcore\/timecode\/add(_:by:)-7ca02","type":"method","title":"func add(TimecodeSourceValue, by: Timecode.ValidationRule) throws"},{"type":"method","title":"func add(AsyncTimecodeSourceValue) async throws","path":"\/documentation\/timecodekitcore\/timecode\/add(_:)-7n3x6"},{"title":"func add(AsyncTimecodeSourceValue, by: Timecode.ValidationRule) async throws","path":"\/documentation\/timecodekitcore\/timecode\/add(_:by:)-5163j","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/add(_:)-1i0b6","title":"func add(GuaranteedTimecodeSourceValue) throws","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/add(_:by:)-80c69","type":"method","title":"func add(GuaranteedTimecodeSourceValue, by: Timecode.ValidationRule) throws"},{"path":"\/documentation\/timecodekitcore\/timecode\/add(_:)-5011j","type":"method","title":"func add(RichTimecodeSourceValue) throws"},{"type":"method","title":"func add(RichTimecodeSourceValue, by: Timecode.ValidationRule) throws","path":"\/documentation\/timecodekitcore\/timecode\/add(_:by:)-7wdo4"},{"title":"func add(AsyncRichTimecodeSourceValue) async throws","path":"\/documentation\/timecodekitcore\/timecode\/add(_:)-780aj","type":"method"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/add(_:by:)-1xjog","title":"func add(AsyncRichTimecodeSourceValue, by: Timecode.ValidationRule) async throws"},{"type":"method","title":"func add(GuaranteedRichTimecodeSourceValue) throws","path":"\/documentation\/timecodekitcore\/timecode\/add(_:)-2v36p"},{"path":"\/documentation\/timecodekitcore\/timecode\/add(_:by:)-3055l","type":"method","title":"func add(GuaranteedRichTimecodeSourceValue, by: Timecode.ValidationRule) throws"},{"title":"func add(FormattedTimecodeSourceValue) throws","path":"\/documentation\/timecodekitcore\/timecode\/add(_:)-8mprr","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/add(_:by:)-34zg6","type":"method","title":"func add(FormattedTimecodeSourceValue, by: Timecode.ValidationRule) throws"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/adding(_:)-972mh","title":"func adding(Timecode) throws -> Timecode"},{"type":"method","title":"func adding(Timecode, by: Timecode.ValidationRule) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/adding(_:by:)-2fl7h"},{"title":"func adding(Timecode.Components) throws -> Timecode","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/adding(_:)-1n8w6"},{"type":"method","title":"func adding(Timecode.Components, by: Timecode.ValidationRule) -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/adding(_:by:)-1op0e"},{"path":"\/documentation\/timecodekitcore\/timecode\/adding(_:)-64k1i","title":"func adding(TimecodeSourceValue) throws -> Timecode","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/adding(_:by:)-8egjm","title":"func adding(TimecodeSourceValue, by: Timecode.ValidationRule) throws -> Timecode","type":"method"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/adding(_:)-19qjo","title":"func adding(AsyncTimecodeSourceValue) async throws -> Timecode"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/adding(_:by:)-73bh6","title":"func adding(AsyncTimecodeSourceValue, by: Timecode.ValidationRule) async throws -> Timecode"},{"path":"\/documentation\/timecodekitcore\/timecode\/adding(_:)-1wwhe","type":"method","title":"func adding(GuaranteedTimecodeSourceValue) throws -> Timecode"},{"path":"\/documentation\/timecodekitcore\/timecode\/adding(_:by:)-9wvjs","title":"func adding(GuaranteedTimecodeSourceValue, by: Timecode.ValidationRule) throws -> Timecode","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/adding(_:)-29yhq","type":"method","title":"func adding(AsyncRichTimecodeSourceValue) async throws -> Timecode"},{"title":"func adding(AsyncRichTimecodeSourceValue, by: Timecode.ValidationRule) async throws -> Timecode","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/adding(_:by:)-7j36"},{"type":"method","title":"func adding(FormattedTimecodeSourceValue) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/adding(_:)-29yto"},{"type":"method","title":"func adding(FormattedTimecodeSourceValue, by: Timecode.ValidationRule) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/adding(_:by:)-27jkt"},{"type":"method","title":"func adding(RichTimecodeSourceValue) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/adding(_:)-462rx"},{"path":"\/documentation\/timecodekitcore\/timecode\/adding(_:by:)-93tmz","title":"func adding(RichTimecodeSourceValue, by: Timecode.ValidationRule) throws -> Timecode","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/adding(_:)-5xq6h","title":"func adding(GuaranteedRichTimecodeSourceValue) throws -> Timecode","type":"method"},{"title":"func adding(GuaranteedRichTimecodeSourceValue, by: Timecode.ValidationRule) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/adding(_:by:)-9w4iw","type":"method"},{"type":"groupMarker","title":"Subtraction"},{"title":"func subtract(Timecode) throws","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:)-1f5mq","type":"method"},{"title":"func subtract(Timecode, by: Timecode.ValidationRule) throws","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:by:)-19vp0"},{"title":"func subtract(Timecode.Components) throws","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:)-9ctfn","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:by:)-9pl51","type":"method","title":"func subtract(Timecode.Components, by: Timecode.ValidationRule)"},{"type":"method","title":"func subtract(TimecodeSourceValue) throws","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:)-835rt"},{"type":"method","title":"func subtract(TimecodeSourceValue, by: Timecode.ValidationRule) throws","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:by:)-e94u"},{"path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:)-t638","title":"func subtract(AsyncTimecodeSourceValue) async throws","type":"method"},{"title":"func subtract(AsyncTimecodeSourceValue, by: Timecode.ValidationRule) async throws","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:by:)-uszg"},{"title":"func subtract(GuaranteedTimecodeSourceValue) throws","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:)-8x9n7"},{"title":"func subtract(GuaranteedTimecodeSourceValue, by: Timecode.ValidationRule) throws","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:by:)-2c2fx","type":"method"},{"type":"method","title":"func subtract(RichTimecodeSourceValue) throws","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:)-3y14p"},{"path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:by:)-8zriq","title":"func subtract(RichTimecodeSourceValue, by: Timecode.ValidationRule) throws","type":"method"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:)-4eaq5","title":"func subtract(AsyncRichTimecodeSourceValue) async throws"},{"title":"func subtract(AsyncRichTimecodeSourceValue, by: Timecode.ValidationRule) async throws","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:by:)-3y6tc"},{"path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:)-8unrb","type":"method","title":"func subtract(GuaranteedRichTimecodeSourceValue) throws"},{"path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:by:)-61jc0","type":"method","title":"func subtract(GuaranteedRichTimecodeSourceValue, by: Timecode.ValidationRule) throws"},{"type":"method","title":"func subtract(FormattedTimecodeSourceValue) throws","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:)-2clhm"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/subtract(_:by:)-951oa","title":"func subtract(FormattedTimecodeSourceValue, by: Timecode.ValidationRule) throws"},{"path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:)-2ms69","title":"func subtracting(AsyncTimecodeSourceValue) async throws -> Timecode","type":"method"},{"title":"func subtracting(AsyncTimecodeSourceValue, by: Timecode.ValidationRule) async throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:by:)-9eks5","type":"method"},{"title":"func subtracting(Timecode) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:)-8nsmp","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:by:)-6myzc","type":"method","title":"func subtracting(Timecode, by: Timecode.ValidationRule) throws -> Timecode"},{"path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:)-wqfx","title":"func subtracting(Timecode.Components) throws -> Timecode","type":"method"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:by:)-1edym","title":"func subtracting(Timecode.Components, by: Timecode.ValidationRule) -> Timecode"},{"title":"func subtracting(AsyncRichTimecodeSourceValue) async throws -> Timecode","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:)-15gui"},{"title":"func subtracting(AsyncRichTimecodeSourceValue, by: Timecode.ValidationRule) async throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:by:)-57buu","type":"method"},{"type":"method","title":"func subtracting(TimecodeSourceValue) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:)-3i0pb"},{"title":"func subtracting(TimecodeSourceValue, by: Timecode.ValidationRule) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:by:)-6xzzi","type":"method"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:)-5jwl0","title":"func subtracting(GuaranteedTimecodeSourceValue) throws -> Timecode"},{"type":"method","title":"func subtracting(GuaranteedTimecodeSourceValue, by: Timecode.ValidationRule) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:by:)-7s2gd"},{"title":"func subtracting(RichTimecodeSourceValue) throws -> Timecode","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:)-3yet8"},{"type":"method","title":"func subtracting(RichTimecodeSourceValue, by: Timecode.ValidationRule) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:by:)-85imt"},{"path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:)-2r7qo","type":"method","title":"func subtracting(GuaranteedRichTimecodeSourceValue) throws -> Timecode"},{"type":"method","title":"func subtracting(GuaranteedRichTimecodeSourceValue, by: Timecode.ValidationRule) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:by:)-8g59b"},{"type":"method","title":"func subtracting(FormattedTimecodeSourceValue) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:)-94lq9"},{"title":"func subtracting(FormattedTimecodeSourceValue, by: Timecode.ValidationRule) throws -> Timecode","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/subtracting(_:by:)-8wjgl"},{"type":"groupMarker","title":"Multiplication"},{"path":"\/documentation\/timecodekitcore\/timecode\/multiply(_:)","title":"func multiply(Double) throws","type":"method"},{"type":"method","title":"func multiply(Double, by: Timecode.ValidationRule)","path":"\/documentation\/timecodekitcore\/timecode\/multiply(_:by:)"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/multiplying(_:)","title":"func multiplying(Double) throws -> Timecode"},{"path":"\/documentation\/timecodekitcore\/timecode\/multiplying(_:by:)","type":"method","title":"func multiplying(Double, by: Timecode.ValidationRule) -> Timecode"},{"type":"groupMarker","title":"Division"},{"path":"\/documentation\/timecodekitcore\/timecode\/divide(_:)","type":"method","title":"func divide(Double) throws"},{"type":"method","title":"func divide(Double, by: Timecode.ValidationRule)","path":"\/documentation\/timecodekitcore\/timecode\/divide(_:by:)"},{"type":"method","title":"func dividing(Double) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/dividing(_:)-411cg"},{"title":"func dividing(Double, by: Timecode.ValidationRule) -> Timecode","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/dividing(_:by:)"},{"path":"\/documentation\/timecodekitcore\/timecode\/dividing(_:)-6wrjc","type":"method","title":"func dividing(Timecode) throws -> Double"},{"title":"func dividing(Timecode.Components) throws -> Double","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/dividing(_:)-5xpva"}],"title":"Math","type":"symbol","path":"\/documentation\/timecodekitcore\/timecode-math"},{"type":"property","title":"var isZero: Bool","path":"\/documentation\/timecodekitcore\/timecode\/iszero"},{"title":"Rounding","type":"groupMarker"},{"title":"func clampComponents()","path":"\/documentation\/timecodekitcore\/timecode\/clampcomponents()","type":"method"},{"title":"func roundUp(toNearest: Timecode.Component) throws","path":"\/documentation\/timecodekitcore\/timecode\/roundup(tonearest:)","type":"method"},{"title":"func roundedUp(toNearest: Timecode.Component) throws -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/roundedup(tonearest:)","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/rounddown(tonearest:)","type":"method","title":"func roundDown(toNearest: Timecode.Component)"},{"path":"\/documentation\/timecodekitcore\/timecode\/roundeddown(tonearest:)","title":"func roundedDown(toNearest: Timecode.Component) -> Timecode","type":"method"},{"type":"groupMarker","title":"Comparison"},{"title":"func compare(to: Timecode, timelineStart: Timecode?) -> ComparisonResult","path":"\/documentation\/timecodekitcore\/timecode\/compare(to:timelinestart:)","type":"method"},{"title":"Intervals","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/asinterval(_:)","title":"func asInterval(FloatingPointSign) -> TimecodeInterval","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/interval(to:)","type":"method","title":"func interval(to: Timecode) -> TimecodeInterval"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/offset(by:)","title":"func offset(by: TimecodeInterval)"},{"path":"\/documentation\/timecodekitcore\/timecode\/offsetting(by:)","type":"method","title":"func offsetting(by: TimecodeInterval) -> Timecode"},{"title":"Validation","type":"groupMarker"},{"title":"var isValid: Bool","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/isvalid"},{"title":"var invalidComponents: Set<Timecode.Component>","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/invalidcomponents"},{"type":"enum","children":[{"type":"groupMarker","title":"Enumeration Cases"},{"path":"\/documentation\/timecodekitcore\/timecode\/validationrule\/allowinginvalid","title":"case allowingInvalid","type":"case"},{"title":"case clamping","path":"\/documentation\/timecodekitcore\/timecode\/validationrule\/clamping","type":"case"},{"title":"case clampingComponents","path":"\/documentation\/timecodekitcore\/timecode\/validationrule\/clampingcomponents","type":"case"},{"type":"case","title":"case wrapping","path":"\/documentation\/timecodekitcore\/timecode\/validationrule\/wrapping"},{"title":"Default Implementations","type":"groupMarker"},{"type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"type":"op","title":"static func != (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/validationrule\/!=(_:_:)"}],"title":"Equatable Implementations","path":"\/documentation\/timecodekitcore\/timecode\/validationrule\/equatable-implementations"}],"path":"\/documentation\/timecodekitcore\/timecode\/validationrule","title":"Timecode.ValidationRule"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"title":"case invalid","path":"\/documentation\/timecodekitcore\/timecode\/validationerror\/invalid","type":"case"},{"type":"case","path":"\/documentation\/timecodekitcore\/timecode\/validationerror\/outofbounds","title":"case outOfBounds"},{"title":"Default Implementations","type":"groupMarker"},{"type":"symbol","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func != (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/validationerror\/!=(_:_:)"}],"path":"\/documentation\/timecodekitcore\/timecode\/validationerror\/equatable-implementations","title":"Equatable Implementations"},{"title":"Error Implementations","type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/validationerror\/error-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitcore\/timecode\/validationerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}]}],"type":"enum","path":"\/documentation\/timecodekitcore\/timecode\/validationerror","title":"Timecode.ValidationError"},{"path":"\/documentation\/timecodekitcore\/timecode\/iswithinvalidcomponentdigitcounts","title":"var isWithinValidComponentDigitCounts: Bool","type":"property"},{"type":"method","title":"func validRange(of: Timecode.Component) -> ClosedRange<Int>","path":"\/documentation\/timecodekitcore\/timecode\/validrange(of:)"},{"type":"groupMarker","title":"Transformer"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/transform(using:)","title":"func transform(using: TimecodeTransformer)"},{"path":"\/documentation\/timecodekitcore\/timecode\/transformed(using:)","type":"method","title":"func transformed(using: TimecodeTransformer) -> Timecode"},{"type":"groupMarker","title":"String Errors"},{"title":"Timecode.StringParseError","type":"enum","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringparseerror\/malformed","type":"case","title":"case malformed"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringparseerror\/equatable-implementations","type":"symbol","title":"Equatable Implementations","children":[{"title":"Operators","type":"groupMarker"},{"type":"op","title":"static func != (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/stringparseerror\/!=(_:_:)"}]},{"path":"\/documentation\/timecodekitcore\/timecode\/stringparseerror\/error-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringparseerror\/localizeddescription","type":"property","title":"var localizedDescription: String"}],"title":"Error Implementations"}],"path":"\/documentation\/timecodekitcore\/timecode\/stringparseerror"},{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/timecodekitcore\/timecode\/*(_:_:)-9w929","type":"op","title":"static func * (Timecode, some BinaryInteger) -> Timecode"},{"title":"static func * (Timecode, Double) -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/*(_:_:)-qiqd","type":"op"},{"title":"static func *= (inout Timecode, Double)","path":"\/documentation\/timecodekitcore\/timecode\/*=(_:_:)-4tu8e","type":"op"},{"path":"\/documentation\/timecodekitcore\/timecode\/*=(_:_:)-pv0w","type":"op","title":"static func *= (inout Timecode, some BinaryInteger)"},{"title":"static func + (Timecode) -> TimecodeInterval","path":"\/documentation\/timecodekitcore\/timecode\/+(_:)","type":"op"},{"type":"op","path":"\/documentation\/timecodekitcore\/timecode\/+(_:_:)","title":"static func + (Timecode, Timecode) -> Timecode"},{"type":"op","title":"static func += (inout Timecode, Timecode)","path":"\/documentation\/timecodekitcore\/timecode\/+=(_:_:)"},{"type":"op","title":"static func - (Timecode) -> TimecodeInterval","path":"\/documentation\/timecodekitcore\/timecode\/-(_:)"},{"path":"\/documentation\/timecodekitcore\/timecode\/-(_:_:)","title":"static func - (Timecode, Timecode) -> Timecode","type":"op"},{"path":"\/documentation\/timecodekitcore\/timecode\/-=(_:_:)","title":"static func -= (inout Timecode, Timecode)","type":"op"},{"path":"\/documentation\/timecodekitcore\/timecode\/_(_:_:)-7qgx5","title":"static func \/ (Timecode, Timecode) -> Double","type":"op"},{"title":"static func \/ (Timecode, Double) -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/_(_:_:)-8bfyf","type":"op"},{"path":"\/documentation\/timecodekitcore\/timecode\/_(_:_:)-8joza","title":"static func \/ (Timecode, some BinaryInteger) -> Timecode","type":"op"},{"title":"static func \/= (inout Timecode, some BinaryInteger)","path":"\/documentation\/timecodekitcore\/timecode\/_=(_:_:)-27y8w","type":"op"},{"path":"\/documentation\/timecodekitcore\/timecode\/_=(_:_:)-783jl","type":"op","title":"static func \/= (inout Timecode, Double)"},{"title":"Default Implementations","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/comparable-implementations","title":"Comparable Implementations","type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func ... (Self) -> PartialRangeThrough<Self>","path":"\/documentation\/timecodekitcore\/timecode\/'...(_:)-4n3r0","type":"op"},{"type":"op","path":"\/documentation\/timecodekitcore\/timecode\/'...(_:)-9avon","title":"static func ... (Self) -> PartialRangeFrom<Self>"},{"title":"static func ... (Self, Self) -> ClosedRange<Self>","path":"\/documentation\/timecodekitcore\/timecode\/'...(_:_:)","type":"op"},{"title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op","path":"\/documentation\/timecodekitcore\/timecode\/'.._(_:)"},{"title":"static func ..< (Self, Self) -> Range<Self>","type":"op","path":"\/documentation\/timecodekitcore\/timecode\/'.._(_:_:)"},{"path":"\/documentation\/timecodekitcore\/timecode\/_(_:_:)-4p4kl","type":"op","title":"static func < (Timecode, Timecode) -> Bool"},{"title":"static func > (Self, Self) -> Bool","type":"op","path":"\/documentation\/timecodekitcore\/timecode\/_(_:_:)-4z4rv"},{"type":"op","path":"\/documentation\/timecodekitcore\/timecode\/_(_:_:)-6ogbv","title":"static func < (Self, Self) -> Bool"},{"type":"op","title":"static func >= (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/_=(_:_:)-8g55g"},{"title":"static func <= (Self, Self) -> Bool","type":"op","path":"\/documentation\/timecodekitcore\/timecode\/_=(_:_:)-fgvt"}]},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var debugDescription: String","path":"\/documentation\/timecodekitcore\/timecode\/debugdescription","type":"property"}],"title":"CustomDebugStringConvertible Implementations","path":"\/documentation\/timecodekitcore\/timecode\/customdebugstringconvertible-implementations","type":"symbol"},{"type":"symbol","title":"CustomStringConvertible Implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitcore\/timecode\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/timecodekitcore\/timecode\/customstringconvertible-implementations"},{"type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"type":"init","path":"\/documentation\/timecodekitcore\/timecode\/init(from:)","title":"init(from: any Decoder) throws"}],"title":"Decodable Implementations","path":"\/documentation\/timecodekitcore\/timecode\/decodable-implementations"},{"title":"Encodable Implementations","children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/timecodekitcore\/timecode\/encodable-implementations","type":"symbol"},{"path":"\/documentation\/timecodekitcore\/timecode\/equatable-implementations","title":"Equatable Implementations","type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"type":"op","path":"\/documentation\/timecodekitcore\/timecode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool"},{"type":"op","title":"static func == (Timecode, Timecode) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/==(_:_:)"},{"path":"\/documentation\/timecodekitcore\/timecode\/==(_:_:)-5u4kw","type":"op","title":"static func == (Self, Self) -> Bool"}]},{"path":"\/documentation\/timecodekitcore\/timecode\/hashable-implementations","children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"title":"Hashable Implementations","type":"symbol"},{"type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var id: Timecode","path":"\/documentation\/timecodekitcore\/timecode\/id"}],"path":"\/documentation\/timecodekitcore\/timecode\/identifiable-implementations","title":"Identifiable Implementations"},{"title":"Strideable Implementations","path":"\/documentation\/timecodekitcore\/timecode\/strideable-implementations","type":"symbol","children":[{"title":"Instance Methods","type":"groupMarker"},{"type":"method","title":"func advanced(by: Timecode.Stride) -> Timecode","path":"\/documentation\/timecodekitcore\/timecode\/advanced(by:)"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/distance(to:)","title":"func distance(to: Timecode) -> Timecode.Stride"},{"title":"Type Aliases","type":"groupMarker"},{"title":"Timecode.Stride","type":"typealias","path":"\/documentation\/timecodekitcore\/timecode\/stride"}]},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/transferrepresentation","title":"static var transferRepresentation: some TransferRepresentation","type":"property"}],"title":"Transferable Implementations","type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/transferable-implementations"}]},{"title":"Timecode.Properties","path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct","type":"struct","children":[{"type":"groupMarker","title":"Initializers"},{"title":"init(rate: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit)","path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/init(rate:base:limit:)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/framerate","title":"var frameRate: TimecodeFrameRate"},{"path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/subframesbase","type":"property","title":"var subFramesBase: Timecode.SubFramesBase"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/upperlimit","title":"var upperLimit: Timecode.UpperLimit"},{"title":"Default Implementations","type":"groupMarker"},{"type":"symbol","title":"Decodable Implementations","children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/init(from:)","type":"init","title":"init(from: any Decoder) throws"}],"path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/decodable-implementations"},{"title":"Equatable Implementations","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}],"path":"\/documentation\/timecodekitcore\/timecode\/properties-swift.struct\/equatable-implementations","type":"symbol"}]},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct","type":"struct","title":"Timecode.Components","children":[{"type":"groupMarker","title":"Component Values"},{"title":"var days: Int","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/days"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/hours","title":"var hours: Int","type":"property"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/minutes","title":"var minutes: Int","type":"property"},{"type":"property","title":"var seconds: Int","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/seconds"},{"title":"var frames: Int","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/frames","type":"property"},{"type":"property","title":"var subFrames: Int","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/subframes"},{"title":"Initializer","type":"groupMarker"},{"title":"init(d: Int, h: Int, m: Int, s: Int, f: Int, sf: Int)","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/init(d:h:m:s:f:sf:)","type":"init"},{"title":"Static Constructors","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/zero","type":"property","title":"static let zero: Timecode.Components"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/random(using:)","title":"static func random(using: Timecode.Properties) -> Timecode.Components","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/random(in:)","title":"static func random(in: Timecode.ComponentRanges) -> Timecode.Components","type":"method"},{"title":"Array","type":"groupMarker"},{"title":"init([(component: Timecode.Component, value: Int)])","type":"init","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/init(_:)-8i9vr"},{"type":"property","title":"var array: [(component: Timecode.Component, value: Int)]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/array"},{"title":"Dictionary","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/init(_:)-7z48q","type":"init","title":"init([Timecode.Component : Int])"},{"title":"var dictionary: [Timecode.Component : Int]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/dictionary","type":"property"},{"type":"groupMarker","title":"Validation"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/iswithinvaliddigitcounts(at:base:)","type":"method","title":"func isWithinValidDigitCounts(at: TimecodeFrameRate, base: Timecode.SubFramesBase) -> Bool"},{"title":"func validRange(of: Timecode.Component, using: Timecode.Properties) -> ClosedRange<Int>","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/validrange(of:using:)","type":"method"},{"title":"func validRange(of: Timecode.Component, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) -> ClosedRange<Int>","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/validrange(of:at:base:limit:)","type":"method"},{"type":"struct","title":"Timecode.ComponentRanges","path":"\/documentation\/timecodekitcore\/timecode\/componentranges","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/init(days:hours:minutes:seconds:frames:subframes:)","title":"init(days: ClosedRange<Int>, hours: ClosedRange<Int>, minutes: ClosedRange<Int>, seconds: ClosedRange<Int>, frames: ClosedRange<Int>, subFrames: ClosedRange<Int>)"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var days: ClosedRange<Int>","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/days"},{"title":"var frames: ClosedRange<Int>","type":"property","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/frames"},{"title":"var hours: ClosedRange<Int>","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/hours","type":"property"},{"title":"var minutes: ClosedRange<Int>","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/minutes","type":"property"},{"title":"var seconds: ClosedRange<Int>","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/seconds","type":"property"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/subframes","title":"var subFrames: ClosedRange<Int>"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/unsaferandomranges","title":"static let unsafeRandomRanges: Timecode.ComponentRanges","type":"property"},{"type":"groupMarker","title":"Default Implementations"},{"title":"Equatable Implementations","type":"symbol","children":[{"type":"groupMarker","title":"Operators"},{"title":"static func != (Self, Self) -> Bool","type":"op","path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/!=(_:_:)"}],"path":"\/documentation\/timecodekitcore\/timecode\/componentranges\/equatable-implementations"}]},{"title":"Default Implementations","type":"groupMarker"},{"type":"symbol","title":"Decodable Implementations","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(from: any Decoder) throws","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/init(from:)","type":"init"}],"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/decodable-implementations"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/equatable-implementations","type":"symbol","title":"Equatable Implementations","children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func != (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/!=(_:_:)"}]},{"title":"Identifiable Implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/id","title":"var id: Timecode.Components"}],"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/identifiable-implementations"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/sequence-implementations","type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"type":"property","title":"var publisher: Publishers.Sequence<Self, Never>","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/publisher"},{"title":"var underestimatedCount: Int","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/underestimatedcount","type":"property"},{"type":"groupMarker","title":"Instance Methods"},{"title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/allsatisfy(_:)"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/compactmap(_:)","type":"method","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/contains(where:)","type":"method"},{"title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/count(where:)","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"type":"method","title":"func dropLast(Int) -> [Self.Element]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/droplast(_:)"},{"title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/elementsequal(_:by:)","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/filter(_:)-3b356","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]"},{"title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/filter(_:)-8dxjy"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?"},{"title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/flatmap(_:)-19siu","type":"method"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/flatmap(_:)-1uidb","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]"},{"type":"method","title":"func forEach((Self.Element) throws -> Void) rethrows","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/foreach(_:)"},{"type":"method","title":"func formatted<S>(S) -> S.FormatOutput","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/formatted(_:)"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/lexicographicallyprecedes(_:by:)","type":"method","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/makeiterator()","type":"method","title":"func makeIterator() -> IndexingIterator<[(component: Timecode.Component, value: Int)]>"},{"title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/map(_:)","type":"method"},{"title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/max(by:)","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/min(by:)","type":"method","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?"},{"title":"func prefix(Int) -> PrefixSequence<Self>","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/prefix(_:)","type":"method"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/reduce(_:_:)","type":"method","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/reduce(into:_:)","type":"method","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/reversed()","type":"method","title":"func reversed() -> [Self.Element]"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/sorted(by:)","type":"method"},{"title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/sorted(using:)-6mxx2"},{"type":"method","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/sorted(using:)-w15h"},{"type":"method","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)"},{"type":"method","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/starts(with:by:)"},{"title":"func suffix(Int) -> [Self.Element]","type":"method","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/suffix(_:)"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/withcontiguousstorageifavailable(_:)","type":"method","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?"}],"title":"Sequence Implementations"}]},{"children":[{"path":"\/documentation\/timecodekitcore\/timecode\/stringvalue(format:)","type":"method","title":"func stringValue(format: Timecode.StringFormat) -> String"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecode\/stringvalueverbose","title":"var stringValueVerbose: String"},{"title":"String Format Options","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringformat","title":"Timecode.StringFormat","children":[{"type":"groupMarker","title":"Options"},{"children":[{"type":"groupMarker","title":"Enumeration Cases"},{"type":"case","title":"case alwaysShowDays","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/alwaysshowdays"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/filenamecompatible","title":"case filenameCompatible","type":"case"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/showsubframes","type":"case","title":"case showSubFrames"},{"type":"groupMarker","title":"Default Implementations"},{"children":[{"title":"Initializers","type":"groupMarker"},{"type":"init","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/init(from:)","title":"init(from: any Decoder) throws"}],"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"title":"Encodable Implementations","type":"symbol","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/encodable-implementations"},{"title":"Equatable Implementations","type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/!=(_:_:)","type":"op"}],"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/equatable-implementations"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/identifiable-implementations","title":"Identifiable Implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption\/id","type":"property","title":"var id: Timecode.StringFormatOption"}],"type":"symbol"}],"title":"Timecode.StringFormatOption","type":"enum","path":"\/documentation\/timecodekitcore\/timecode\/stringformatoption"},{"title":"Convenience Properties","type":"groupMarker"},{"title":"var alwaysShowDays: Bool","path":"\/documentation\/timecodekitcore\/swift\/set\/alwaysshowdays","type":"property"},{"title":"var filenameCompatible: Bool","path":"\/documentation\/timecodekitcore\/swift\/set\/filenamecompatible","type":"property"},{"path":"\/documentation\/timecodekitcore\/swift\/set\/showsubframes","type":"property","title":"var showSubFrames: Bool"},{"type":"groupMarker","title":"Default Options"},{"type":"method","path":"\/documentation\/timecodekitcore\/swift\/set\/default()","title":"static func `default`() -> Set<Element>"}],"type":"typealias"}],"path":"\/documentation\/timecodekitcore\/timecode-string","type":"symbol","title":"Display String"},{"path":"\/documentation\/timecodekitcore\/timecode-comparison-and-sort","title":"Comparison & Sort","children":[{"title":"Instance Comparison","type":"groupMarker"},{"title":"func compare(to: Timecode, timelineStart: Timecode?) -> ComparisonResult","path":"\/documentation\/timecodekitcore\/timecode\/compare(to:timelinestart:)","type":"method"},{"type":"groupMarker","title":"Collection Sorting"},{"type":"method","title":"func isSorted(ascending: Bool, timelineStart: Timecode?) -> Bool","path":"\/documentation\/timecodekitcore\/swift\/collection\/issorted(ascending:timelinestart:)"},{"type":"method","title":"func sort(ascending: Bool, timelineStart: Timecode)","path":"\/documentation\/timecodekitcore\/swift\/mutablecollection\/sort(ascending:timelinestart:)"},{"type":"method","path":"\/documentation\/timecodekitcore\/swift\/collection\/sorted()","title":"func sorted() -> [Self.Element]"},{"path":"\/documentation\/timecodekitcore\/swift\/collection\/sorted(ascending:timelinestart:)","type":"method","title":"func sorted(ascending: Bool, timelineStart: Timecode) -> [Self.Element]"},{"title":"SortComparator","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecodesortcomparator","type":"struct","children":[{"type":"groupMarker","title":"Initializers"},{"path":"\/documentation\/timecodekitcore\/timecodesortcomparator\/init(order:timelinestart:)","type":"init","title":"init(order: SortOrder, timelineStart: Timecode?)"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var order: SortOrder","path":"\/documentation\/timecodekitcore\/timecodesortcomparator\/order","type":"property"},{"type":"property","title":"var timelineStart: Timecode?","path":"\/documentation\/timecodekitcore\/timecodesortcomparator\/timelinestart"},{"type":"groupMarker","title":"Instance Methods"},{"title":"func compare(Timecode, Timecode) -> ComparisonResult","path":"\/documentation\/timecodekitcore\/timecodesortcomparator\/compare(_:_:)","type":"method"},{"type":"groupMarker","title":"Type Aliases"},{"type":"typealias","title":"TimecodeSortComparator.Compared","path":"\/documentation\/timecodekitcore\/timecodesortcomparator\/compared"},{"title":"Default Implementations","type":"groupMarker"},{"title":"Equatable Implementations","type":"symbol","path":"\/documentation\/timecodekitcore\/timecodesortcomparator\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/timecodekitcore\/timecodesortcomparator\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}]}],"title":"TimecodeSortComparator"}],"type":"symbol"},{"title":"Range & Strideable","path":"\/documentation\/timecodekitcore\/timecode-range-and-strideable","type":"article"},{"title":"Validation","path":"\/documentation\/timecodekitcore\/timecode-validation","children":[{"title":"Timecode Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecode\/isvalid","type":"property","title":"var isValid: Bool"},{"path":"\/documentation\/timecodekitcore\/timecode\/invalidcomponents","title":"var invalidComponents: Set<Timecode.Component>","type":"property"},{"type":"groupMarker","title":"Timecode.Components Methods"},{"path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/invalidcomponents(at:base:limit:)","type":"method","title":"func invalidComponents(at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) -> Set<Timecode.Component>"},{"title":"func invalidComponents(using: Timecode.Properties) -> Set<Timecode.Component>","path":"\/documentation\/timecodekitcore\/timecode\/components-swift.struct\/invalidcomponents(using:)","type":"method"}],"type":"symbol"},{"type":"groupMarker","title":"Frame Rate"},{"type":"enum","path":"\/documentation\/timecodekitcore\/timecodeframerate","title":"TimecodeFrameRate","children":[{"title":"Rates","type":"groupMarker"},{"title":"case fps23_976","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps23_976","type":"case"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps24","title":"case fps24","type":"case"},{"type":"case","title":"case fps24_98","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps24_98"},{"type":"case","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps25","title":"case fps25"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps29_97","title":"case fps29_97","type":"case"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps29_97d","type":"case","title":"case fps29_97d"},{"type":"case","title":"case fps30","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps30"},{"title":"case fps30d","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps30d","type":"case"},{"title":"case fps47_952","type":"case","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps47_952"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps48","type":"case","title":"case fps48"},{"type":"case","title":"case fps50","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps50"},{"type":"case","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps59_94","title":"case fps59_94"},{"type":"case","title":"case fps59_94d","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps59_94d"},{"title":"case fps60","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps60","type":"case"},{"type":"case","title":"case fps60d","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps60d"},{"type":"case","title":"case fps90","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps90"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps95_904","type":"case","title":"case fps95_904"},{"title":"case fps96","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps96","type":"case"},{"title":"case fps100","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps100","type":"case"},{"title":"case fps119_88","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps119_88","type":"case"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps119_88d","type":"case","title":"case fps119_88d"},{"title":"case fps120","type":"case","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps120"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/fps120d","title":"case fps120d","type":"case"},{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init?(frameDuration: CMTime, drop: Bool)","path":"\/documentation\/timecodekitcore\/timecodeframerate\/init(frameduration:drop:)-7opfz"},{"type":"init","title":"init?(frameDuration: Fraction, drop: Bool)","path":"\/documentation\/timecodekitcore\/timecodeframerate\/init(frameduration:drop:)-9tpfm"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/init(rate:drop:)-2qyn2","type":"init","title":"init?(rate: Fraction, drop: Bool)"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/init(rate:drop:)-3myb7","title":"init?(rate: CMTime, drop: Bool)","type":"init"},{"type":"init","title":"init?(rawValue: String)","path":"\/documentation\/timecodekitcore\/timecodeframerate\/init(rawvalue:)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var aafMetadata: (editRate: String, dropFrame: String, framesPerSecond: String)","path":"\/documentation\/timecodekitcore\/timecodeframerate\/aafmetadata"},{"title":"var compatibleGroup: TimecodeFrameRate.CompatibleGroup","type":"property","path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.property"},{"type":"property","title":"var compatibleGroupRates: [TimecodeFrameRate]","path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegrouprates"},{"type":"property","title":"var fcpXMLMetadata: (frameDuration: String, tcFormat: String)","path":"\/documentation\/timecodekitcore\/timecodeframerate\/fcpxmlmetadata"},{"title":"var isDrop: Bool","path":"\/documentation\/timecodekitcore\/timecodeframerate\/isdrop","type":"property"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/maxframenumberdisplayable","type":"property","title":"var maxFrameNumberDisplayable: Int"},{"type":"property","title":"var numberOfDigits: Int","path":"\/documentation\/timecodekitcore\/timecodeframerate\/numberofdigits"},{"title":"var stringValueVerbose: String","path":"\/documentation\/timecodekitcore\/timecodeframerate\/stringvalueverbose","type":"property"},{"type":"groupMarker","title":"Instance Methods"},{"title":"func isCompatible(with: TimecodeFrameRate) -> Bool","path":"\/documentation\/timecodekitcore\/timecodeframerate\/iscompatible(with:)","type":"method"},{"type":"method","title":"func maxSubFrameCountExpressible(in: Timecode.UpperLimit, base: Timecode.SubFramesBase) -> Int","path":"\/documentation\/timecodekitcore\/timecodeframerate\/maxsubframecountexpressible(in:base:)"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/maxtotalframes(in:)","type":"method","title":"func maxTotalFrames(in: Timecode.UpperLimit) -> Int"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/maxtotalframesexpressible(in:)","type":"method","title":"func maxTotalFramesExpressible(in: Timecode.UpperLimit) -> Int"},{"title":"func maxTotalSubFrames(in: Timecode.UpperLimit, base: Timecode.SubFramesBase) -> Int","type":"method","path":"\/documentation\/timecodekitcore\/timecodeframerate\/maxtotalsubframes(in:base:)"},{"type":"method","path":"\/documentation\/timecodekitcore\/timecodeframerate\/videoframerate(interlaced:)","title":"func videoFrameRate(interlaced: Bool) -> VideoFrameRate?"},{"type":"groupMarker","title":"Type Properties"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/alldrop","type":"property","title":"static let allDrop: [TimecodeFrameRate]"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/allnondrop","type":"property","title":"static let allNonDrop: [TimecodeFrameRate]"},{"title":"Enumerations","type":"groupMarker"},{"title":"TimecodeFrameRate.CompatibleGroup","path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"type":"case","title":"case ntscColor","path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum\/ntsccolor"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum\/ntsccolorwalltime","type":"case","title":"case ntscColorWallTime"},{"title":"case ntscDrop","path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum\/ntscdrop","type":"case"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum\/whole","title":"case whole","type":"case"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum\/stringvalue","type":"property","title":"var stringValue: String"},{"title":"Type Properties","type":"groupMarker"},{"title":"static let table: [TimecodeFrameRate.CompatibleGroup : [TimecodeFrameRate]]","type":"property","path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum\/table"},{"type":"groupMarker","title":"Default Implementations"},{"children":[{"type":"groupMarker","title":"Instance Properties"},{"title":"var description: String","path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum\/description","type":"property"}],"title":"CustomStringConvertible Implementations","path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum\/customstringconvertible-implementations","type":"symbol"},{"type":"symbol","title":"Equatable Implementations","path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum\/equatable-implementations","children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/compatiblegroup-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}]}],"type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecodeframerate\/description","title":"var description: String"}],"title":"CustomStringConvertible Implementations","path":"\/documentation\/timecodekitcore\/timecodeframerate\/customstringconvertible-implementations"},{"title":"Equatable Implementations","type":"symbol","children":[{"type":"groupMarker","title":"Operators"},{"title":"static func != (Self, Self) -> Bool","type":"op","path":"\/documentation\/timecodekitcore\/timecodeframerate\/!=(_:_:)"}],"path":"\/documentation\/timecodekitcore\/timecodeframerate\/equatable-implementations"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/framerateprotocol-implementations","children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/init(stringvalue:)","type":"init","title":"init?(stringValue: String)"},{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/alternateframeduration","type":"property","title":"var alternateFrameDuration: Fraction?"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/frameduration","type":"property","title":"var frameDuration: Fraction"},{"title":"var rate: Fraction","path":"\/documentation\/timecodekitcore\/timecodeframerate\/rate","type":"property"},{"path":"\/documentation\/timecodekitcore\/timecodeframerate\/stringvalue","type":"property","title":"var stringValue: String"}],"type":"symbol","title":"FrameRateProtocol Implementations"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecodeframerate\/id","title":"var id: TimecodeFrameRate"}],"path":"\/documentation\/timecodekitcore\/timecodeframerate\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"type":"symbol","path":"\/documentation\/timecodekitcore\/timecodeframerate\/rawrepresentable-implementations","title":"RawRepresentable Implementations","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init(from: any Decoder) throws","path":"\/documentation\/timecodekitcore\/timecodeframerate\/init(from:)"},{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var hashValue: Int","path":"\/documentation\/timecodekitcore\/timecodeframerate\/hashvalue"},{"title":"Instance Methods","type":"groupMarker"},{"type":"method","title":"func encode(to: any Encoder) throws","path":"\/documentation\/timecodekitcore\/timecodeframerate\/encode(to:)"},{"title":"func hash(into: inout Hasher)","path":"\/documentation\/timecodekitcore\/timecodeframerate\/hash(into:)","type":"method"}]}]},{"type":"enum","path":"\/documentation\/timecodekitcore\/videoframerate","title":"VideoFrameRate","children":[{"type":"groupMarker","title":"Rates"},{"type":"case","title":"case fps23_98p","path":"\/documentation\/timecodekitcore\/videoframerate\/fps23_98p"},{"title":"case fps24p","path":"\/documentation\/timecodekitcore\/videoframerate\/fps24p","type":"case"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/fps25p","type":"case","title":"case fps25p"},{"type":"case","title":"case fps25i","path":"\/documentation\/timecodekitcore\/videoframerate\/fps25i"},{"title":"case fps29_97p","path":"\/documentation\/timecodekitcore\/videoframerate\/fps29_97p","type":"case"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/fps29_97i","title":"case fps29_97i","type":"case"},{"title":"case fps30p","type":"case","path":"\/documentation\/timecodekitcore\/videoframerate\/fps30p"},{"type":"case","title":"case fps47_95p","path":"\/documentation\/timecodekitcore\/videoframerate\/fps47_95p"},{"type":"case","title":"case fps48p","path":"\/documentation\/timecodekitcore\/videoframerate\/fps48p"},{"type":"case","path":"\/documentation\/timecodekitcore\/videoframerate\/fps50p","title":"case fps50p"},{"type":"case","path":"\/documentation\/timecodekitcore\/videoframerate\/fps50i","title":"case fps50i"},{"title":"case fps59_94p","path":"\/documentation\/timecodekitcore\/videoframerate\/fps59_94p","type":"case"},{"type":"case","title":"case fps59_94i","path":"\/documentation\/timecodekitcore\/videoframerate\/fps59_94i"},{"type":"case","title":"case fps60p","path":"\/documentation\/timecodekitcore\/videoframerate\/fps60p"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/fps60i","type":"case","title":"case fps60i"},{"type":"case","path":"\/documentation\/timecodekitcore\/videoframerate\/fps90p","title":"case fps90p"},{"title":"case fps95_9p","type":"case","path":"\/documentation\/timecodekitcore\/videoframerate\/fps95_9p"},{"title":"case fps96p","path":"\/documentation\/timecodekitcore\/videoframerate\/fps96p","type":"case"},{"type":"case","path":"\/documentation\/timecodekitcore\/videoframerate\/fps100p","title":"case fps100p"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/fps119_88p","type":"case","title":"case fps119_88p"},{"title":"case fps120p","type":"case","path":"\/documentation\/timecodekitcore\/videoframerate\/fps120p"},{"type":"groupMarker","title":"String Extensions"},{"type":"property","title":"var videoFrameRate: VideoFrameRate?","path":"\/documentation\/timecodekitcore\/swift\/string\/videoframerate"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/init(fps:interlaced:strict:)-4k1pl","title":"init?(fps: Float, interlaced: Bool, strict: Bool)","type":"init"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/init(fps:interlaced:strict:)-6f100","type":"init","title":"init?(fps: Double, interlaced: Bool, strict: Bool)"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/init(frameduration:interlaced:)-2ef3k","title":"init?(frameDuration: CMTime, interlaced: Bool)","type":"init"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/init(frameduration:interlaced:)-6d0ui","title":"init?(frameDuration: Fraction, interlaced: Bool)","type":"init"},{"type":"init","title":"init?(rate: CMTime, interlaced: Bool)","path":"\/documentation\/timecodekitcore\/videoframerate\/init(rate:interlaced:)-7wl1d"},{"type":"init","path":"\/documentation\/timecodekitcore\/videoframerate\/init(rate:interlaced:)-9yfzn","title":"init?(rate: Fraction, interlaced: Bool)"},{"title":"init?(rawValue: String)","type":"init","path":"\/documentation\/timecodekitcore\/videoframerate\/init(rawvalue:)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var fps: Double","path":"\/documentation\/timecodekitcore\/videoframerate\/fps"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/isinterlaced","title":"var isInterlaced: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/timecodeframerate(drop:)","type":"method","title":"func timecodeFrameRate(drop: Bool) -> TimecodeFrameRate?"},{"title":"Default Implementations","type":"groupMarker"},{"type":"symbol","path":"\/documentation\/timecodekitcore\/videoframerate\/customstringconvertible-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var description: String","path":"\/documentation\/timecodekitcore\/videoframerate\/description"}],"title":"CustomStringConvertible Implementations"},{"title":"Equatable Implementations","children":[{"title":"Operators","type":"groupMarker"},{"type":"op","title":"static func != (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/videoframerate\/!=(_:_:)"}],"path":"\/documentation\/timecodekitcore\/videoframerate\/equatable-implementations","type":"symbol"},{"type":"symbol","title":"FrameRateProtocol Implementations","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init?(stringValue: String)","path":"\/documentation\/timecodekitcore\/videoframerate\/init(stringvalue:)"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/alternateframeduration","type":"property","title":"var alternateFrameDuration: Fraction?"},{"type":"property","path":"\/documentation\/timecodekitcore\/videoframerate\/frameduration","title":"var frameDuration: Fraction"},{"type":"property","title":"var rate: Fraction","path":"\/documentation\/timecodekitcore\/videoframerate\/rate"},{"title":"var stringValue: String","path":"\/documentation\/timecodekitcore\/videoframerate\/stringvalue","type":"property"}],"path":"\/documentation\/timecodekitcore\/videoframerate\/framerateprotocol-implementations"},{"type":"symbol","title":"Identifiable Implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/id","title":"var id: VideoFrameRate","type":"property"}],"path":"\/documentation\/timecodekitcore\/videoframerate\/identifiable-implementations"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/rawrepresentable-implementations","type":"symbol","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(from: any Decoder) throws","path":"\/documentation\/timecodekitcore\/videoframerate\/init(from:)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var hashValue: Int","path":"\/documentation\/timecodekitcore\/videoframerate\/hashvalue","type":"property"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","path":"\/documentation\/timecodekitcore\/videoframerate\/encode(to:)","title":"func encode(to: any Encoder) throws"},{"path":"\/documentation\/timecodekitcore\/videoframerate\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"title":"RawRepresentable Implementations"}]},{"type":"groupMarker","title":"Math & Conversions"},{"path":"\/documentation\/timecodekitcore\/math","title":"Math","type":"article"},{"path":"\/documentation\/timecodekitcore\/timecode-conversions","type":"article","title":"Conversions"},{"children":[{"title":"Fraction","type":"struct","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/timecodekitcore\/fraction\/*(_:_:)","type":"op","title":"static func * (Fraction, Fraction) -> Fraction"},{"path":"\/documentation\/timecodekitcore\/fraction\/+(_:_:)","type":"op","title":"static func + (Fraction, Fraction) -> Fraction"},{"title":"static func - (Fraction, Fraction) -> Fraction","type":"op","path":"\/documentation\/timecodekitcore\/fraction\/-(_:_:)"},{"title":"static func \/ (Fraction, Fraction) -> Fraction","path":"\/documentation\/timecodekitcore\/fraction\/_(_:_:)-3yk0w","type":"op"},{"title":"Initializers","type":"groupMarker"},{"title":"init(CMTime)","path":"\/documentation\/timecodekitcore\/fraction\/init(_:)","type":"init"},{"type":"init","title":"init(Int, Int)","path":"\/documentation\/timecodekitcore\/fraction\/init(_:_:)"},{"path":"\/documentation\/timecodekitcore\/fraction\/init(double:decimalprecision:)","type":"init","title":"init(double: Double, decimalPrecision: Int)"},{"type":"init","path":"\/documentation\/timecodekitcore\/fraction\/init(fcpxmlstring:)","title":"init?(fcpxmlString: String)"},{"path":"\/documentation\/timecodekitcore\/fraction\/init(reducing:_:)","type":"init","title":"init(reducing: Int, Int)"},{"title":"Instance Properties","type":"groupMarker"},{"type":"property","path":"\/documentation\/timecodekitcore\/fraction\/cmtimevalue","title":"var cmTimeValue: CMTime"},{"title":"var decimalValue: Decimal","path":"\/documentation\/timecodekitcore\/fraction\/decimalvalue","type":"property"},{"title":"let denominator: Int","type":"property","path":"\/documentation\/timecodekitcore\/fraction\/denominator"},{"title":"var doubleValue: Double","path":"\/documentation\/timecodekitcore\/fraction\/doublevalue","type":"property"},{"title":"var fcpxmlStringValue: String","path":"\/documentation\/timecodekitcore\/fraction\/fcpxmlstringvalue","type":"property"},{"title":"var floatValue: Float","path":"\/documentation\/timecodekitcore\/fraction\/floatvalue","type":"property"},{"path":"\/documentation\/timecodekitcore\/fraction\/isnegative","title":"var isNegative: Bool","type":"property"},{"type":"property","path":"\/documentation\/timecodekitcore\/fraction\/isreduced","title":"var isReduced: Bool"},{"title":"var isWholeInteger: Bool","path":"\/documentation\/timecodekitcore\/fraction\/iswholeinteger","type":"property"},{"path":"\/documentation\/timecodekitcore\/fraction\/numerator","type":"property","title":"let numerator: Int"},{"title":"var stringValue: String","type":"property","path":"\/documentation\/timecodekitcore\/fraction\/stringvalue"},{"title":"Instance Methods","type":"groupMarker"},{"type":"method","title":"func abs() -> Fraction","path":"\/documentation\/timecodekitcore\/fraction\/abs()"},{"title":"func isEqual(to: Fraction) -> Bool","path":"\/documentation\/timecodekitcore\/fraction\/isequal(to:)","type":"method"},{"type":"method","path":"\/documentation\/timecodekitcore\/fraction\/isidentical(to:)","title":"func isIdentical(to: Fraction) -> Bool"},{"type":"method","title":"func negate()","path":"\/documentation\/timecodekitcore\/fraction\/negate()"},{"title":"func negated() -> Fraction","type":"method","path":"\/documentation\/timecodekitcore\/fraction\/negated()"},{"type":"method","path":"\/documentation\/timecodekitcore\/fraction\/reduced()","title":"func reduced() -> Fraction"},{"title":"func timecodeInterval(at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) throws -> TimecodeInterval","path":"\/documentation\/timecodekitcore\/fraction\/timecodeinterval(at:base:limit:)","type":"method"},{"title":"func timecodeInterval(using: Timecode.Properties) throws -> TimecodeInterval","path":"\/documentation\/timecodekitcore\/fraction\/timecodeinterval(using:)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/fraction\/zero","type":"property","title":"static let zero: Fraction"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"title":"static func ... (Self) -> PartialRangeFrom<Self>","path":"\/documentation\/timecodekitcore\/fraction\/'...(_:)-1z3jw","type":"op"},{"title":"static func ... (Self) -> PartialRangeThrough<Self>","path":"\/documentation\/timecodekitcore\/fraction\/'...(_:)-96ru0","type":"op"},{"path":"\/documentation\/timecodekitcore\/fraction\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op","path":"\/documentation\/timecodekitcore\/fraction\/'.._(_:)"},{"title":"static func ..< (Self, Self) -> Range<Self>","path":"\/documentation\/timecodekitcore\/fraction\/'.._(_:_:)","type":"op"},{"title":"static func < (Fraction, Fraction) -> Bool","path":"\/documentation\/timecodekitcore\/fraction\/_(_:_:)-3lrgl","type":"op"},{"title":"static func > (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/fraction\/_(_:_:)-fj7k","type":"op"},{"type":"op","title":"static func >= (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/fraction\/_=(_:_:)-4104i"},{"path":"\/documentation\/timecodekitcore\/fraction\/_=(_:_:)-461cs","title":"static func <= (Self, Self) -> Bool","type":"op"}],"title":"Comparable Implementations","type":"symbol","path":"\/documentation\/timecodekitcore\/fraction\/comparable-implementations"},{"path":"\/documentation\/timecodekitcore\/fraction\/customstringconvertible-implementations","type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/fraction\/description","type":"property","title":"var description: String"}],"title":"CustomStringConvertible Implementations"},{"children":[{"title":"Operators","type":"groupMarker"},{"type":"op","path":"\/documentation\/timecodekitcore\/fraction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool"},{"path":"\/documentation\/timecodekitcore\/fraction\/==(_:_:)","title":"static func == (Fraction, Fraction) -> Bool","type":"op"}],"title":"Equatable Implementations","type":"symbol","path":"\/documentation\/timecodekitcore\/fraction\/equatable-implementations"},{"type":"symbol","title":"Hashable Implementations","path":"\/documentation\/timecodekitcore\/fraction\/hashable-implementations","children":[{"type":"groupMarker","title":"Instance Methods"},{"title":"func hash(into: inout Hasher)","path":"\/documentation\/timecodekitcore\/fraction\/hash(into:)","type":"method"}]},{"type":"symbol","path":"\/documentation\/timecodekitcore\/fraction\/identifiable-implementations","title":"Identifiable Implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"title":"var id: String","path":"\/documentation\/timecodekitcore\/fraction\/id","type":"property"}]}],"path":"\/documentation\/timecodekitcore\/fraction"},{"type":"groupMarker","title":"CMTime Extensions"},{"title":"init(Fraction)","path":"\/documentation\/timecodekitcore\/coremedia\/cmtime\/init(_:)","type":"init"},{"title":"var fractionValue: Fraction","path":"\/documentation\/timecodekitcore\/coremedia\/cmtime\/fractionvalue","type":"property"},{"type":"groupMarker","title":"CMTimeRange Extensions"},{"title":"func timecodeRange(at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) throws -> ClosedRange<Timecode>","type":"method","path":"\/documentation\/timecodekitcore\/coremedia\/cmtimerange\/timecoderange(at:base:limit:)"},{"path":"\/documentation\/timecodekitcore\/coremedia\/cmtimerange\/timecoderange(using:)","type":"method","title":"func timecodeRange(using: Timecode.Properties) throws -> ClosedRange<Timecode>"}],"type":"symbol","path":"\/documentation\/timecodekitcore\/rational-numbers-and-cmtime","title":"Rational Numbers & CMTime"},{"path":"\/documentation\/timecodekitcore\/timecode-interval","title":"Timecode Interval","type":"symbol","children":[{"children":[{"type":"groupMarker","title":"Initializers"},{"title":"init(Timecode, FloatingPointSign)","path":"\/documentation\/timecodekitcore\/timecodeinterval\/init(_:_:)","type":"init"},{"path":"\/documentation\/timecodekitcore\/timecodeinterval\/init(_:at:base:limit:)-4ww3n","type":"init","title":"init(CMTime, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) throws"},{"type":"init","path":"\/documentation\/timecodekitcore\/timecodeinterval\/init(_:at:base:limit:)-96665","title":"init(Fraction, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) throws"},{"path":"\/documentation\/timecodekitcore\/timecodeinterval\/init(_:using:)-6t2ys","type":"init","title":"init(Fraction, using: Timecode.Properties) throws"},{"type":"init","path":"\/documentation\/timecodekitcore\/timecodeinterval\/init(_:using:)-8zc3f","title":"init(CMTime, using: Timecode.Properties) throws"},{"type":"init","path":"\/documentation\/timecodekitcore\/timecodeinterval\/init(realtime:at:base:limit:)","title":"init(realTime: TimeInterval, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) throws"},{"type":"init","title":"init(realTime: TimeInterval, using: Timecode.Properties) throws","path":"\/documentation\/timecodekitcore\/timecodeinterval\/init(realtime:using:)"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecodeinterval\/absoluteinterval","title":"let absoluteInterval: Timecode","type":"property"},{"title":"var cmTimeValue: CMTime","type":"property","path":"\/documentation\/timecodekitcore\/timecodeinterval\/cmtimevalue"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecodeinterval\/isnegative","title":"var isNegative: Bool"},{"path":"\/documentation\/timecodekitcore\/timecodeinterval\/rationalvalue","title":"var rationalValue: Fraction","type":"property"},{"type":"property","path":"\/documentation\/timecodekitcore\/timecodeinterval\/realtimevalue","title":"var realTimeValue: TimeInterval"},{"type":"property","title":"let sign: FloatingPointSign","path":"\/documentation\/timecodekitcore\/timecodeinterval\/sign"},{"type":"property","title":"var verboseDescription: String","path":"\/documentation\/timecodekitcore\/timecodeinterval\/verbosedescription"},{"type":"groupMarker","title":"Instance Methods"},{"title":"func flattened() -> Timecode","path":"\/documentation\/timecodekitcore\/timecodeinterval\/flattened()","type":"method"},{"type":"groupMarker","title":"Type Methods"},{"path":"\/documentation\/timecodekitcore\/timecodeinterval\/negative(_:)","type":"method","title":"static func negative(Timecode) -> TimecodeInterval"},{"path":"\/documentation\/timecodekitcore\/timecodeinterval\/positive(_:)","type":"method","title":"static func positive(Timecode) -> TimecodeInterval"},{"type":"groupMarker","title":"Default Implementations"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var debugDescription: String","path":"\/documentation\/timecodekitcore\/timecodeinterval\/debugdescription","type":"property"}],"type":"symbol","title":"CustomDebugStringConvertible Implementations","path":"\/documentation\/timecodekitcore\/timecodeinterval\/customdebugstringconvertible-implementations"},{"type":"symbol","title":"CustomStringConvertible Implementations","path":"\/documentation\/timecodekitcore\/timecodeinterval\/customstringconvertible-implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitcore\/timecodeinterval\/description","type":"property","title":"var description: String"}]},{"type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/timecodeinterval\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/timecodekitcore\/timecodeinterval\/equatable-implementations","title":"Equatable Implementations"},{"children":[{"type":"groupMarker","title":"Instance Properties"},{"title":"var id: TimecodeInterval","type":"property","path":"\/documentation\/timecodekitcore\/timecodeinterval\/id"}],"path":"\/documentation\/timecodekitcore\/timecodeinterval\/identifiable-implementations","type":"symbol","title":"Identifiable Implementations"}],"type":"struct","title":"TimecodeInterval","path":"\/documentation\/timecodekitcore\/timecodeinterval"},{"type":"groupMarker","title":"CMTime Extensions"},{"type":"method","title":"func timecodeInterval(at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) throws -> TimecodeInterval","path":"\/documentation\/timecodekitcore\/coremedia\/cmtime\/timecodeinterval(at:base:limit:)"},{"type":"method","path":"\/documentation\/timecodekitcore\/coremedia\/cmtime\/timecodeinterval(using:)","title":"func timecodeInterval(using: Timecode.Properties) throws -> TimecodeInterval"},{"title":"Double Extensions","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/swift\/double\/timecodeinterval(at:base:limit:)","title":"func timecodeInterval(at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) throws -> TimecodeInterval","type":"method"},{"path":"\/documentation\/timecodekitcore\/swift\/double\/timecodeinterval(using:)","type":"method","title":"func timecodeInterval(using: Timecode.Properties) throws -> TimecodeInterval"}]},{"title":"TimecodeTransformer","type":"struct","path":"\/documentation\/timecodekitcore\/timecodetransformer"},{"type":"groupMarker","title":"Encoding"},{"path":"\/documentation\/timecodekitcore\/timecode-encoding","children":[{"title":"NSItemProvider","type":"groupMarker"},{"type":"init","title":"init(from: NSItemProvider, propertiesForString: Timecode.Properties) async throws","path":"\/documentation\/timecodekitcore\/timecode\/init(from:propertiesforstring:)-7hl9l"},{"type":"init","title":"init(from: [NSItemProvider], propertiesForString: Timecode.Properties) async throws","path":"\/documentation\/timecodekitcore\/timecode\/init(from:propertiesforstring:)-1cqhu"},{"path":"\/documentation\/timecodekitcore\/timecode\/itemproviders(stringformat:)","title":"func itemProviders(stringFormat: Timecode.StringFormat) -> [NSItemProvider]","type":"method"},{"title":"Transferable","type":"groupMarker"},{"title":"static var transferRepresentation: some TransferRepresentation","path":"\/documentation\/timecodekitcore\/timecode\/transferrepresentation","type":"property"},{"type":"groupMarker","title":"UT Types"},{"title":"static let timecode: UTType","path":"\/documentation\/timecodekitcore\/uniformtypeidentifiers\/uttype\/timecode","type":"property"},{"type":"property","title":"static let textUTType: UTType","path":"\/documentation\/timecodekitcore\/timecode\/textuttype"},{"type":"property","title":"static let copyUTTypes: [UTType]","path":"\/documentation\/timecodekitcore\/timecode\/copyuttypes"},{"title":"static let pasteUTTypes: [UTType]","path":"\/documentation\/timecodekitcore\/timecode\/pasteuttypes","type":"property"}],"type":"symbol","title":"Encoding"},{"type":"groupMarker","title":"Additional Value Types"},{"type":"struct","title":"FeetAndFrames","children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/feetandframes\/init(_:subframesbase:)","title":"init(some StringProtocol, subFramesBase: Timecode.SubFramesBase) throws","type":"init"},{"path":"\/documentation\/timecodekitcore\/feetandframes\/init(feet:frames:subframes:subframesbase:)","type":"init","title":"init(feet: Int, frames: Int, subFrames: Int, subFramesBase: Timecode.SubFramesBase)"},{"type":"groupMarker","title":"Instance Properties"},{"type":"property","title":"var feet: Int","path":"\/documentation\/timecodekitcore\/feetandframes\/feet"},{"type":"property","title":"var frameCount: Timecode.FrameCount","path":"\/documentation\/timecodekitcore\/feetandframes\/framecount"},{"type":"property","path":"\/documentation\/timecodekitcore\/feetandframes\/frames","title":"var frames: Int"},{"title":"var stringValue: String","path":"\/documentation\/timecodekitcore\/feetandframes\/stringvalue","type":"property"},{"type":"property","path":"\/documentation\/timecodekitcore\/feetandframes\/stringvalueverbose","title":"var stringValueVerbose: String"},{"title":"var subFrames: Int","path":"\/documentation\/timecodekitcore\/feetandframes\/subframes","type":"property"},{"path":"\/documentation\/timecodekitcore\/feetandframes\/subframesbase","title":"var subFramesBase: Timecode.SubFramesBase","type":"property"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitcore\/feetandframes\/description","title":"var description: String","type":"property"}],"title":"CustomStringConvertible Implementations","path":"\/documentation\/timecodekitcore\/feetandframes\/customstringconvertible-implementations"},{"title":"Equatable Implementations","children":[{"type":"groupMarker","title":"Operators"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/timecodekitcore\/feetandframes\/!=(_:_:)","type":"op"}],"type":"symbol","path":"\/documentation\/timecodekitcore\/feetandframes\/equatable-implementations"},{"type":"symbol","title":"Identifiable Implementations","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitcore\/feetandframes\/id","title":"var id: FeetAndFrames","type":"property"}],"path":"\/documentation\/timecodekitcore\/feetandframes\/identifiable-implementations"}],"path":"\/documentation\/timecodekitcore\/feetandframes"}],"path":"\/documentation\/timecodekitcore","type":"module"},{"path":"\/documentation\/timecodekitav","type":"module","title":"TimecodeKitAV","children":[{"type":"groupMarker","title":"AVAsset"},{"type":"symbol","title":"AVAsset Timecode Track","path":"\/documentation\/timecodekitav\/avasset-timecode-track","children":[{"title":"AVAsset Methods","type":"groupMarker"},{"title":"func startTimecode(at: TimecodeFrameRate?, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) async throws -> Timecode?","path":"\/documentation\/timecodekitav\/avfoundation\/avasset\/starttimecode(at:base:limit:)","type":"method"},{"title":"func durationTimecode(at: TimecodeFrameRate?, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) async throws -> Timecode","path":"\/documentation\/timecodekitav\/avfoundation\/avasset\/durationtimecode(at:base:limit:)","type":"method"},{"title":"func endTimecode(at: TimecodeFrameRate?, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) async throws -> Timecode?","type":"method","path":"\/documentation\/timecodekitav\/avfoundation\/avasset\/endtimecode(at:base:limit:)"},{"title":"func timecodes(at: TimecodeFrameRate?, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit) async throws -> [[Timecode]]","path":"\/documentation\/timecodekitav\/avfoundation\/avasset\/timecodes(at:base:limit:)","type":"method"},{"title":"func timecodeFrameRate(drop: Bool?) async throws -> TimecodeFrameRate","type":"method","path":"\/documentation\/timecodekitav\/avfoundation\/avasset\/timecodeframerate(drop:)"},{"path":"\/documentation\/timecodekitav\/avfoundation\/avasset\/videoframerate(interlaced:)","title":"func videoFrameRate(interlaced: Bool?) async throws -> VideoFrameRate","type":"method"},{"title":"var isVideoInterlaced: Bool","path":"\/documentation\/timecodekitav\/avfoundation\/avasset\/isvideointerlaced","type":"property"},{"type":"groupMarker","title":"AVAssetTrack Methods"},{"path":"\/documentation\/timecodekitav\/avfoundation\/avassettrack\/durationtimecode(at:limit:base:)","type":"method","title":"func durationTimecode(at: TimecodeFrameRate?, limit: Timecode.UpperLimit, base: Timecode.SubFramesBase) async throws -> Timecode"},{"title":"AVMutableMovie Methods","type":"groupMarker"},{"path":"\/documentation\/timecodekitav\/avfoundation\/avmutablemovie\/addtimecodetrack(starttimecode:duration:extensions:filetype:)","type":"method","title":"func addTimecodeTrack(startTimecode: Timecode, duration: Timecode?, extensions: CMFormatDescription.Extensions?, fileType: AVFileType) async throws -> AVAssetTrack"},{"path":"\/documentation\/timecodekitav\/avfoundation\/avmutablemovie\/replacetimecodetrack(starttimecode:duration:extensions:filetype:)","type":"method","title":"func replaceTimecodeTrack(startTimecode: Timecode, duration: Timecode?, extensions: CMFormatDescription.Extensions?, fileType: AVFileType) async throws -> AVAssetTrack"},{"title":"Errors","type":"groupMarker"},{"title":"Timecode.MediaParseError","path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediaparseerror","type":"enum","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"title":"case internalError","path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediaparseerror\/internalerror","type":"case"},{"path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediaparseerror\/missingornonstandardframerate","title":"case missingOrNonStandardFrameRate","type":"case"},{"title":"case noData","path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediaparseerror\/nodata","type":"case"},{"title":"case unknownTimecode","path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediaparseerror\/unknowntimecode","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediaparseerror\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}],"path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediaparseerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"title":"Error Implementations","path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediaparseerror\/error-implementations","type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var localizedDescription: String","path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediaparseerror\/localizeddescription"}]}]},{"path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediawriteerror","title":"Timecode.MediaWriteError","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"title":"case internalError","path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediawriteerror\/internalerror","type":"case"},{"type":"groupMarker","title":"Default Implementations"},{"title":"Equatable Implementations","path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediawriteerror\/equatable-implementations","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediawriteerror\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}],"type":"symbol"},{"path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediawriteerror\/error-implementations","type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","path":"\/documentation\/timecodekitav\/timecodekitcore\/timecode\/mediawriteerror\/localizeddescription","title":"var localizedDescription: String"}],"title":"Error Implementations"}],"type":"enum"}]},{"type":"groupMarker","title":"VideoFrameRate Initializers"},{"title":"init(asset: AVAsset, interlaced: Bool?) async throws","path":"\/documentation\/timecodekitav\/timecodekitcore\/videoframerate\/init(asset:interlaced:)","type":"init"}]},{"path":"\/documentation\/timecodekitui","type":"module","title":"TimecodeKitUI","children":[{"title":"AppKit","type":"groupMarker"},{"title":"Timecode.TextField","children":[{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init?(coder: NSCoder)","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textfield\/init(coder:)"},{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textfield\/canceloperation(_:)","type":"method","title":"func cancelOperation(Any?)"}],"type":"class","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textfield"},{"title":"Timecode.TextFieldCell","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textfieldcell","type":"class","children":[{"type":"groupMarker","title":"Initializers"},{"title":"init(coder: NSCoder)","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textfieldcell\/init(coder:)","type":"init"}]},{"title":"SwiftUI","type":"groupMarker"},{"title":"TimecodeField","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(components: Binding<Timecode.Components>)","type":"init","path":"\/documentation\/timecodekitui\/timecodefield\/init(components:)"},{"type":"init","title":"init(components: Binding<Timecode.Components>, at: Binding<TimecodeFrameRate>, base: Binding<Timecode.SubFramesBase>, limit: Binding<Timecode.UpperLimit>)","path":"\/documentation\/timecodekitui\/timecodefield\/init(components:at:base:limit:)-3sprn"},{"path":"\/documentation\/timecodekitui\/timecodefield\/init(components:at:base:limit:)-8vmij","title":"init(components: Binding<Timecode.Components>, at: TimecodeFrameRate, base: Timecode.SubFramesBase, limit: Timecode.UpperLimit)","type":"init"},{"title":"init(components: Binding<Timecode.Components>, using: Timecode.Properties)","path":"\/documentation\/timecodekitui\/timecodefield\/init(components:using:)","type":"init"},{"type":"init","title":"init(timecode: Binding<Timecode>)","path":"\/documentation\/timecodekitui\/timecodefield\/init(timecode:)"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/body","type":"property","title":"var body: some View"},{"type":"groupMarker","title":"Type Methods"},{"title":"static func validate(pastedTimecode: Timecode, localTimecodeProperties: Timecode.Properties, pastePolicy: TimecodeField.PastePolicy, validationPolicy: TimecodeField.ValidationPolicy, inputStyle: TimecodeField.InputStyle) -> Timecode?","path":"\/documentation\/timecodekitui\/timecodefield\/validate(pastedtimecode:localtimecodeproperties:pastepolicy:validationpolicy:inputstyle:)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/endediting","title":"case endEditing","type":"case"},{"title":"case focusNextComponent","path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/focusnextcomponent","type":"case"},{"path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/resetcomponentfocus(component:)","title":"case resetComponentFocus(component: Timecode.Component?)","type":"case"},{"type":"groupMarker","title":"Default Implementations"},{"title":"CaseIterable Implementations","children":[{"title":"Type Properties","type":"groupMarker"},{"title":"static let allCases: [TimecodeField.FieldAction]","path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/allcases","type":"property"}],"path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/caseiterable-implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/!=(_:_:)","type":"op"}],"type":"symbol","path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/equatable-implementations","title":"Equatable Implementations"},{"type":"symbol","path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/identifiable-implementations","title":"Identifiable Implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var id: TimecodeField.FieldAction.RawValue","type":"property","path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/id"}]},{"type":"symbol","path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/rawrepresentable-implementations","children":[{"title":"Initializers","type":"groupMarker"},{"type":"init","title":"init?(rawValue: String)","path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/init(rawvalue:)"},{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var hashValue: Int","path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/hashvalue"},{"type":"property","title":"var rawValue: String","path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/rawvalue-swift.property"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func hash(into: inout Hasher)","path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/hash(into:)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"type":"typealias","title":"TimecodeField.FieldAction.RawValue","path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction\/rawvalue-swift.typealias"}],"title":"RawRepresentable Implementations"}],"path":"\/documentation\/timecodekitui\/timecodefield\/fieldaction","type":"enum","title":"TimecodeField.FieldAction"},{"children":[{"type":"groupMarker","title":"Enumeration Cases"},{"title":"case custom(action: TimecodeField.InputRejectionFeedback.CustomInputRejectionFeedback)","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/custom(action:)","type":"case"},{"title":"case validationBased(animation: TimecodeField.InputRejectionFeedback.RejectionAnimation?)","type":"case","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/validationbased(animation:)"},{"type":"case","title":"case validationBasedAndUndefinedKeys(animation: TimecodeField.InputRejectionFeedback.RejectionAnimation?)","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/validationbasedandundefinedkeys(animation:)"},{"type":"groupMarker","title":"Type Aliases"},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/custominputrejectionfeedback","title":"TimecodeField.InputRejectionFeedback.CustomInputRejectionFeedback","type":"typealias"},{"type":"groupMarker","title":"Enumerations"},{"type":"enum","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/reason","title":"TimecodeField.InputRejectionFeedback.Reason","children":[{"type":"groupMarker","title":"Enumeration Cases"},{"title":"case invalid","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/reason\/invalid","type":"case"},{"title":"case undefinedKey","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/reason\/undefinedkey","type":"case"},{"title":"Initializers","type":"groupMarker"},{"type":"init","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/reason\/init(rawvalue:)","title":"init?(rawValue: String)"},{"type":"groupMarker","title":"Default Implementations"},{"children":[{"title":"Operators","type":"groupMarker"},{"title":"static func != (Self, Self) -> Bool","type":"op","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/reason\/!=(_:_:)"}],"path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/reason\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/reason\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/reason\/hashvalue","type":"property","title":"var hashValue: Int"},{"type":"groupMarker","title":"Instance Methods"},{"title":"func hash(into: inout Hasher)","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/reason\/hash(into:)","type":"method"}]}]},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/rejectionanimation","type":"enum","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/rejectionanimation\/pulse","type":"case","title":"case pulse"},{"title":"case shake","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/rejectionanimation\/shake","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/rejectionanimation\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/rejectionanimation\/equatable-implementations","title":"Equatable Implementations","children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/rejectionanimation\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}]},{"title":"RawRepresentable Implementations","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/rejectionanimation\/rawrepresentable-implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Properties"},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/rejectionanimation\/hashvalue","type":"property","title":"var hashValue: Int"},{"type":"groupMarker","title":"Instance Methods"},{"type":"method","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/rejectionanimation\/hash(into:)","title":"func hash(into: inout Hasher)"}]}],"title":"TimecodeField.InputRejectionFeedback.RejectionAnimation"},{"title":"TimecodeField.InputRejectionFeedback.UserAction","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/useraction","type":"enum","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/useraction\/keyrejected(component:key:reason:)","type":"case","title":"case keyRejected(component: Timecode.Component, key: KeyEquivalent, reason: TimecodeField.InputRejectionFeedback.Reason)"},{"title":"case pasteRejected","type":"case","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/useraction\/pasterejected"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/useraction\/equatable-implementations","type":"symbol","children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback\/useraction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"title":"Equatable Implementations"}]}],"type":"enum","path":"\/documentation\/timecodekitui\/timecodefield\/inputrejectionfeedback","title":"TimecodeField.InputRejectionFeedback"},{"type":"enum","path":"\/documentation\/timecodekitui\/timecodefield\/inputstyle","title":"TimecodeField.InputStyle","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"type":"case","title":"case autoAdvance","path":"\/documentation\/timecodekitui\/timecodefield\/inputstyle\/autoadvance"},{"type":"case","title":"case continuousWithinComponent","path":"\/documentation\/timecodekitui\/timecodefield\/inputstyle\/continuouswithincomponent"},{"type":"case","path":"\/documentation\/timecodekitui\/timecodefield\/inputstyle\/unbounded","title":"case unbounded"},{"type":"groupMarker","title":"Initializers"},{"type":"init","title":"init?(rawValue: String)","path":"\/documentation\/timecodekitui\/timecodefield\/inputstyle\/init(rawvalue:)"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","title":"Equatable Implementations","path":"\/documentation\/timecodekitui\/timecodefield\/inputstyle\/equatable-implementations","children":[{"title":"Operators","type":"groupMarker"},{"type":"op","path":"\/documentation\/timecodekitui\/timecodefield\/inputstyle\/!=(_:_:)","title":"static func != (Self, Self) -> Bool"}]},{"type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"title":"var id: TimecodeField.InputStyle.RawValue","path":"\/documentation\/timecodekitui\/timecodefield\/inputstyle\/id","type":"property"}],"title":"Identifiable Implementations","path":"\/documentation\/timecodekitui\/timecodefield\/inputstyle\/identifiable-implementations"},{"title":"RawRepresentable Implementations","type":"symbol","path":"\/documentation\/timecodekitui\/timecodefield\/inputstyle\/rawrepresentable-implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputstyle\/hashvalue","type":"property","title":"var hashValue: Int"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func hash(into: inout Hasher)","path":"\/documentation\/timecodekitui\/timecodefield\/inputstyle\/hash(into:)","type":"method"}]}]},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"title":"case noWrap","path":"\/documentation\/timecodekitui\/timecodefield\/inputwrapping\/nowrap","type":"case"},{"title":"case wrap","type":"case","path":"\/documentation\/timecodekitui\/timecodefield\/inputwrapping\/wrap"},{"title":"Initializers","type":"groupMarker"},{"title":"init?(rawValue: String)","path":"\/documentation\/timecodekitui\/timecodefield\/inputwrapping\/init(rawvalue:)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"title":"Equatable Implementations","type":"symbol","path":"\/documentation\/timecodekitui\/timecodefield\/inputwrapping\/equatable-implementations","children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/inputwrapping\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}]},{"title":"Identifiable Implementations","type":"symbol","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var id: TimecodeField.InputWrapping.RawValue","path":"\/documentation\/timecodekitui\/timecodefield\/inputwrapping\/id"}],"path":"\/documentation\/timecodekitui\/timecodefield\/inputwrapping\/identifiable-implementations"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","path":"\/documentation\/timecodekitui\/timecodefield\/inputwrapping\/hashvalue","title":"var hashValue: Int"},{"title":"Instance Methods","type":"groupMarker"},{"type":"method","title":"func hash(into: inout Hasher)","path":"\/documentation\/timecodekitui\/timecodefield\/inputwrapping\/hash(into:)"}],"path":"\/documentation\/timecodekitui\/timecodefield\/inputwrapping\/rawrepresentable-implementations","type":"symbol","title":"RawRepresentable Implementations"}],"path":"\/documentation\/timecodekitui\/timecodefield\/inputwrapping","title":"TimecodeField.InputWrapping","type":"enum"},{"title":"TimecodeField.PastePolicy","type":"enum","path":"\/documentation\/timecodekitui\/timecodefield\/pastepolicy","children":[{"type":"groupMarker","title":"Enumeration Cases"},{"path":"\/documentation\/timecodekitui\/timecodefield\/pastepolicy\/allownewproperties","type":"case","title":"case allowNewProperties"},{"type":"case","title":"case discardProperties","path":"\/documentation\/timecodekitui\/timecodefield\/pastepolicy\/discardproperties"},{"title":"case preserveLocalProperties","path":"\/documentation\/timecodekitui\/timecodefield\/pastepolicy\/preservelocalproperties","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/pastepolicy\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"type":"groupMarker","title":"Default Implementations"},{"type":"symbol","path":"\/documentation\/timecodekitui\/timecodefield\/pastepolicy\/equatable-implementations","children":[{"title":"Operators","type":"groupMarker"},{"type":"op","path":"\/documentation\/timecodekitui\/timecodefield\/pastepolicy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool"}],"title":"Equatable Implementations"},{"type":"symbol","path":"\/documentation\/timecodekitui\/timecodefield\/pastepolicy\/identifiable-implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/pastepolicy\/id","type":"property","title":"var id: TimecodeField.PastePolicy.RawValue"}],"title":"Identifiable Implementations"},{"path":"\/documentation\/timecodekitui\/timecodefield\/pastepolicy\/rawrepresentable-implementations","type":"symbol","title":"RawRepresentable Implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var hashValue: Int","path":"\/documentation\/timecodekitui\/timecodefield\/pastepolicy\/hashvalue"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/pastepolicy\/hash(into:)","type":"method","title":"func hash(into: inout Hasher)"}]}]},{"title":"TimecodeField.PasteValidationResult","type":"enum","children":[{"type":"groupMarker","title":"Enumeration Cases"},{"path":"\/documentation\/timecodekitui\/timecodefield\/pastevalidationresult\/allowed(_:)","type":"case","title":"case allowed(Timecode)"},{"path":"\/documentation\/timecodekitui\/timecodefield\/pastevalidationresult\/rejected(_:)","title":"case rejected(TimecodeField.InputRejectionFeedback.UserAction)","type":"case"},{"type":"groupMarker","title":"Default Implementations"},{"children":[{"type":"groupMarker","title":"Operators"},{"type":"op","title":"static func != (Self, Self) -> Bool","path":"\/documentation\/timecodekitui\/timecodefield\/pastevalidationresult\/!=(_:_:)"}],"title":"Equatable Implementations","path":"\/documentation\/timecodekitui\/timecodefield\/pastevalidationresult\/equatable-implementations","type":"symbol"}],"path":"\/documentation\/timecodekitui\/timecodefield\/pastevalidationresult"},{"title":"TimecodeField.ValidationPolicy","type":"enum","path":"\/documentation\/timecodekitui\/timecodefield\/validationpolicy","children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/validationpolicy\/allowinvalid","type":"case","title":"case allowInvalid"},{"title":"case enforceValid","path":"\/documentation\/timecodekitui\/timecodefield\/validationpolicy\/enforcevalid","type":"case"},{"type":"groupMarker","title":"Initializers"},{"type":"init","path":"\/documentation\/timecodekitui\/timecodefield\/validationpolicy\/init(rawvalue:)","title":"init?(rawValue: String)"},{"title":"Default Implementations","type":"groupMarker"},{"type":"symbol","children":[{"type":"groupMarker","title":"Operators"},{"path":"\/documentation\/timecodekitui\/timecodefield\/validationpolicy\/!=(_:_:)","type":"op","title":"static func != (Self, Self) -> Bool"}],"path":"\/documentation\/timecodekitui\/timecodefield\/validationpolicy\/equatable-implementations","title":"Equatable Implementations"},{"path":"\/documentation\/timecodekitui\/timecodefield\/validationpolicy\/identifiable-implementations","type":"symbol","title":"Identifiable Implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","path":"\/documentation\/timecodekitui\/timecodefield\/validationpolicy\/id","title":"var id: TimecodeField.ValidationPolicy.RawValue"}]},{"type":"symbol","path":"\/documentation\/timecodekitui\/timecodefield\/validationpolicy\/rawrepresentable-implementations","children":[{"title":"Instance Properties","type":"groupMarker"},{"type":"property","path":"\/documentation\/timecodekitui\/timecodefield\/validationpolicy\/hashvalue","title":"var hashValue: Int"},{"title":"Instance Methods","type":"groupMarker"},{"title":"func hash(into: inout Hasher)","path":"\/documentation\/timecodekitui\/timecodefield\/validationpolicy\/hash(into:)","type":"method"}],"title":"RawRepresentable Implementations"}]},{"title":"Default Implementations","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodefield\/view-implementations","children":[{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldescapeaction(_:)","type":"method","title":"func timecodeFieldEscapeAction(TimecodeField.FieldAction?) -> some View"},{"title":"func timecodeFieldInputRejectionFeedback(TimecodeField.InputRejectionFeedback?) -> some View","path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldinputrejectionfeedback(_:)","type":"method"},{"title":"func timecodeFieldInputStyle(TimecodeField.InputStyle) -> some View","path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldinputstyle(_:)","type":"method"},{"path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldinputwrapping(_:)","type":"method","title":"func timecodeFieldInputWrapping(TimecodeField.InputWrapping) -> some View"},{"type":"method","title":"func timecodeFieldPastePolicy(TimecodeField.PastePolicy) -> some View","path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldpastepolicy(_:)"},{"path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldreturnaction(_:)","type":"method","title":"func timecodeFieldReturnAction(TimecodeField.FieldAction?) -> some View"},{"title":"func timecodeFieldValidationPolicy(TimecodeField.ValidationPolicy) -> some View","path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldvalidationpolicy(_:)","type":"method"},{"title":"func timecodeFormat(Timecode.StringFormat) -> some View","path":"\/documentation\/timecodekitui\/timecodefield\/timecodeformat(_:)","type":"method"},{"title":"func timecodeSubFramesStyle(Never?) -> some View","path":"\/documentation\/timecodekitui\/timecodefield\/timecodesubframesstyle(_:)","type":"method"},{"type":"method","title":"func timecodeSubFramesStyle(Never?, scale: Text.Scale) -> some View","path":"\/documentation\/timecodekitui\/timecodefield\/timecodesubframesstyle(_:scale:)"},{"path":"\/documentation\/timecodekitui\/timecodefield\/timecodesubframesstyle(scale:)","title":"func timecodeSubFramesStyle(scale: Text.Scale) -> some View","type":"method"}],"type":"symbol","title":"View Implementations"},{"title":"View Implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Methods"},{"path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldescapeaction(_:)","type":"method","title":"func timecodeFieldEscapeAction(TimecodeField.FieldAction?) -> some View"},{"type":"method","path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldinputrejectionfeedback(_:)","title":"func timecodeFieldInputRejectionFeedback(TimecodeField.InputRejectionFeedback?) -> some View"},{"title":"func timecodeFieldInputStyle(TimecodeField.InputStyle) -> some View","type":"method","path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldinputstyle(_:)"},{"path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldinputwrapping(_:)","title":"func timecodeFieldInputWrapping(TimecodeField.InputWrapping) -> some View","type":"method"},{"type":"method","title":"func timecodeFieldPastePolicy(TimecodeField.PastePolicy) -> some View","path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldpastepolicy(_:)"},{"path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldreturnaction(_:)","type":"method","title":"func timecodeFieldReturnAction(TimecodeField.FieldAction?) -> some View"},{"path":"\/documentation\/timecodekitui\/timecodefield\/timecodefieldvalidationpolicy(_:)","type":"method","title":"func timecodeFieldValidationPolicy(TimecodeField.ValidationPolicy) -> some View"},{"path":"\/documentation\/timecodekitui\/timecodefield\/timecodeformat(_:)","title":"func timecodeFormat(Timecode.StringFormat) -> some View","type":"method"},{"path":"\/documentation\/timecodekitui\/timecodefield\/timecodesubframesstyle(_:)","type":"method","title":"func timecodeSubFramesStyle(Never?) -> some View"},{"title":"func timecodeSubFramesStyle(Never?, scale: Text.Scale) -> some View","path":"\/documentation\/timecodekitui\/timecodefield\/timecodesubframesstyle(_:scale:)","type":"method"},{"type":"method","path":"\/documentation\/timecodekitui\/timecodefield\/timecodesubframesstyle(scale:)","title":"func timecodeSubFramesStyle(scale: Text.Scale) -> some View"}],"path":"\/documentation\/timecodekitui\/timecodefield\/view-implementations"}],"path":"\/documentation\/timecodekitui\/timecodefield","type":"struct"},{"title":"TimecodeText","type":"struct","path":"\/documentation\/timecodekitui\/timecodetext","children":[{"title":"Initializers","type":"groupMarker"},{"type":"init","path":"\/documentation\/timecodekitui\/timecodetext\/init(_:)","title":"init(Timecode)"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var body: Text","path":"\/documentation\/timecodekitui\/timecodetext\/body","type":"property"},{"type":"groupMarker","title":"Default Implementations"},{"path":"\/documentation\/timecodekitui\/timecodetext\/view-implementations","title":"View Implementations","type":"symbol","children":[{"type":"groupMarker","title":"Instance Methods"},{"title":"func timecodeFieldEscapeAction(TimecodeField.FieldAction?) -> some View","path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldescapeaction(_:)","type":"method"},{"path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldinputrejectionfeedback(_:)","title":"func timecodeFieldInputRejectionFeedback(TimecodeField.InputRejectionFeedback?) -> some View","type":"method"},{"path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldinputstyle(_:)","title":"func timecodeFieldInputStyle(TimecodeField.InputStyle) -> some View","type":"method"},{"type":"method","title":"func timecodeFieldInputWrapping(TimecodeField.InputWrapping) -> some View","path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldinputwrapping(_:)"},{"type":"method","title":"func timecodeFieldPastePolicy(TimecodeField.PastePolicy) -> some View","path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldpastepolicy(_:)"},{"path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldreturnaction(_:)","type":"method","title":"func timecodeFieldReturnAction(TimecodeField.FieldAction?) -> some View"},{"title":"func timecodeFieldValidationPolicy(TimecodeField.ValidationPolicy) -> some View","type":"method","path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldvalidationpolicy(_:)"},{"path":"\/documentation\/timecodekitui\/timecodetext\/timecodeformat(_:)","title":"func timecodeFormat(Timecode.StringFormat) -> some View","type":"method"},{"type":"method","title":"func timecodeSubFramesStyle(Never?) -> some View","path":"\/documentation\/timecodekitui\/timecodetext\/timecodesubframesstyle(_:)"},{"type":"method","title":"func timecodeSubFramesStyle(Never?, scale: Text.Scale) -> some View","path":"\/documentation\/timecodekitui\/timecodetext\/timecodesubframesstyle(_:scale:)"},{"title":"func timecodeSubFramesStyle(scale: Text.Scale) -> some View","path":"\/documentation\/timecodekitui\/timecodetext\/timecodesubframesstyle(scale:)","type":"method"}]},{"path":"\/documentation\/timecodekitui\/timecodetext\/view-implementations","title":"View Implementations","type":"symbol","children":[{"title":"Instance Methods","type":"groupMarker"},{"type":"method","path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldescapeaction(_:)","title":"func timecodeFieldEscapeAction(TimecodeField.FieldAction?) -> some View"},{"path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldinputrejectionfeedback(_:)","title":"func timecodeFieldInputRejectionFeedback(TimecodeField.InputRejectionFeedback?) -> some View","type":"method"},{"title":"func timecodeFieldInputStyle(TimecodeField.InputStyle) -> some View","path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldinputstyle(_:)","type":"method"},{"title":"func timecodeFieldInputWrapping(TimecodeField.InputWrapping) -> some View","path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldinputwrapping(_:)","type":"method"},{"title":"func timecodeFieldPastePolicy(TimecodeField.PastePolicy) -> some View","path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldpastepolicy(_:)","type":"method"},{"path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldreturnaction(_:)","title":"func timecodeFieldReturnAction(TimecodeField.FieldAction?) -> some View","type":"method"},{"path":"\/documentation\/timecodekitui\/timecodetext\/timecodefieldvalidationpolicy(_:)","title":"func timecodeFieldValidationPolicy(TimecodeField.ValidationPolicy) -> some View","type":"method"},{"path":"\/documentation\/timecodekitui\/timecodetext\/timecodeformat(_:)","type":"method","title":"func timecodeFormat(Timecode.StringFormat) -> some View"},{"title":"func timecodeSubFramesStyle(Never?) -> some View","type":"method","path":"\/documentation\/timecodekitui\/timecodetext\/timecodesubframesstyle(_:)"},{"type":"method","title":"func timecodeSubFramesStyle(Never?, scale: Text.Scale) -> some View","path":"\/documentation\/timecodekitui\/timecodetext\/timecodesubframesstyle(_:scale:)"},{"title":"func timecodeSubFramesStyle(scale: Text.Scale) -> some View","path":"\/documentation\/timecodekitui\/timecodetext\/timecodesubframesstyle(scale:)","type":"method"}]}]},{"type":"groupMarker","title":"SwiftUI View Modifiers"},{"title":"func timecodeFormat(Timecode.StringFormat) -> some View","type":"method","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodeformat(_:)"},{"type":"method","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodefieldhighlightstyle(_:)-9hksr","title":"func timecodeFieldHighlightStyle<S>(S) -> some View"},{"path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodefieldhighlightstyle(_:)-7ivkv","title":"func timecodeFieldHighlightStyle<S>(S?) -> some View","type":"method"},{"path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodefieldinputstyle(_:)","title":"func timecodeFieldInputStyle(TimecodeField.InputStyle) -> some View","type":"method"},{"type":"method","title":"func timecodeFieldInputWrapping(TimecodeField.InputWrapping) -> some View","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodefieldinputwrapping(_:)"},{"path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodefieldescapeaction(_:)","title":"func timecodeFieldEscapeAction(TimecodeField.FieldAction?) -> some View","type":"method"},{"title":"func timecodeFieldReturnAction(TimecodeField.FieldAction?) -> some View","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodefieldreturnaction(_:)","type":"method"},{"type":"method","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodefieldvalidationpolicy(_:)","title":"func timecodeFieldValidationPolicy(TimecodeField.ValidationPolicy) -> some View"},{"path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodefieldinputrejectionfeedback(_:)","type":"method","title":"func timecodeFieldInputRejectionFeedback(TimecodeField.InputRejectionFeedback?) -> some View"},{"path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodeseparatorstyle(_:)-5y6h3","type":"method","title":"func timecodeSeparatorStyle<S>(S) -> some View"},{"title":"func timecodeSeparatorStyle<S>(S?) -> some View","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodeseparatorstyle(_:)-2850h","type":"method"},{"type":"method","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodesubframesstyle(_:)-8kd5i","title":"func timecodeSubFramesStyle<S>(S) -> some View"},{"type":"method","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodesubframesstyle(_:)-9bqix","title":"func timecodeSubFramesStyle<S>(S?) -> some View"},{"type":"method","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodesubframesstyle(_:)-7bmto","title":"func timecodeSubFramesStyle(Never?) -> some View"},{"path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodesubframesstyle(scale:)","title":"func timecodeSubFramesStyle(scale: Text.Scale) -> some View","type":"method"},{"type":"method","title":"func timecodeSubFramesStyle<S>(S, scale: Text.Scale) -> some View","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodesubframesstyle(_:scale:)-98maf"},{"type":"method","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodesubframesstyle(_:scale:)-29j63","title":"func timecodeSubFramesStyle<S>(S?, scale: Text.Scale) -> some View"},{"type":"method","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodesubframesstyle(_:scale:)-3c006","title":"func timecodeSubFramesStyle(Never?, scale: Text.Scale) -> some View"},{"path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodevalidationstyle(_:)-5jgaa","title":"func timecodeValidationStyle<S>(S) -> some View","type":"method"},{"type":"method","title":"func timecodeValidationStyle<S>(S?) -> some View","path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodevalidationstyle(_:)-483yi"},{"title":"SwiftUI State","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodestate","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init(initialValue: Timecode)","path":"\/documentation\/timecodekitui\/timecodestate\/init(initialvalue:)","type":"init"},{"path":"\/documentation\/timecodekitui\/timecodestate\/init(wrappedvalue:)","type":"init","title":"init(wrappedValue: Timecode)"},{"title":"Instance Properties","type":"groupMarker"},{"type":"property","title":"var projectedValue: Binding<Timecode>","path":"\/documentation\/timecodekitui\/timecodestate\/projectedvalue"},{"type":"property","title":"var wrappedValue: Timecode","path":"\/documentation\/timecodekitui\/timecodestate\/wrappedvalue"},{"type":"groupMarker","title":"Type Aliases"},{"path":"\/documentation\/timecodekitui\/timecodestate\/value","type":"typealias","title":"TimecodeState.Value"},{"title":"Default Implementations","type":"groupMarker"},{"type":"symbol","path":"\/documentation\/timecodekitui\/timecodestate\/dynamicproperty-implementations","children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/timecodestate\/update()","type":"method","title":"func update()"}],"title":"DynamicProperty Implementations"}],"title":"TimecodeState","type":"struct"},{"title":"func option(Timecode.StringFormatOption) -> Binding<Bool>","path":"\/documentation\/timecodekitui\/swiftuicore\/binding\/option(_:)","type":"method"},{"title":"AttributedString","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/foundation\/attributedstring\/init(_:format:separatorstyle:subframesstyle:validationstyle:)","title":"init(Timecode, format: Timecode.StringFormat, separatorStyle: Color?, subFramesStyle: Color?, validationStyle: Color?)","type":"init"},{"type":"groupMarker","title":"NSAttributedString"},{"type":"init","path":"\/documentation\/timecodekitui\/foundation\/nsattributedstring\/init(_:format:defaultattributes:separatorattributes:subframesattributes:invalidattributes:)","title":"convenience init(Timecode, format: Timecode.StringFormat, defaultAttributes: [NSAttributedString.Key : Any]?, separatorAttributes: [NSAttributedString.Key : Any]?, subFramesAttributes: [NSAttributedString.Key : Any]?, invalidAttributes: [NSAttributedString.Key : Any]?)"},{"path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/nsattributedstring(format:defaultattributes:separatorattributes:subframesattributes:invalidattributes:)","title":"func nsAttributedString(format: Timecode.StringFormat, defaultAttributes: [NSAttributedString.Key : Any]?, separatorAttributes: [NSAttributedString.Key : Any]?, subFramesAttributes: [NSAttributedString.Key : Any]?, invalidAttributes: [NSAttributedString.Key : Any]?) -> NSAttributedString","type":"method"},{"title":"Formatter","type":"groupMarker"},{"type":"class","children":[{"title":"Initializers","type":"groupMarker"},{"title":"init?(coder: NSCoder)","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/init(coder:)","type":"init"},{"path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/init(using:stringformat:showsvalidation:invalidattributes:)-6nyjb","title":"convenience init(using: Timecode, stringFormat: Timecode.StringFormat?, showsValidation: Bool, invalidAttributes: [NSAttributedString.Key : Any]?)","type":"init"},{"path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/init(using:stringformat:showsvalidation:invalidattributes:)-n6qt","type":"init","title":"init(using: Timecode.Properties?, stringFormat: Timecode.StringFormat?, showsValidation: Bool, invalidAttributes: [NSAttributedString.Key : Any]?)"},{"title":"Instance Properties","type":"groupMarker"},{"title":"var alignment: NSTextAlignment","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/alignment","type":"property"},{"type":"property","title":"var frameRate: TimecodeFrameRate?","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/framerate"},{"type":"property","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/invalidattributes","title":"var invalidAttributes: [NSAttributedString.Key : Any]"},{"path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/showsvalidation","type":"property","title":"var showsValidation: Bool"},{"type":"property","title":"var stringFormat: Timecode.StringFormat","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/stringformat"},{"path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/subframesbase","title":"var subFramesBase: Timecode.SubFramesBase?","type":"property"},{"type":"property","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/timecodeproperties","title":"var timecodeProperties: Timecode.Properties?"},{"type":"property","title":"var upperLimit: Timecode.UpperLimit?","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/upperlimit"},{"title":"Instance Methods","type":"groupMarker"},{"type":"method","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/attributedstring(for:withdefaultattributes:)","title":"func attributedString(for: Any, withDefaultAttributes: [NSAttributedString.Key : Any]?) -> NSAttributedString?"},{"path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/getobjectvalue(_:for:errordescription:)","type":"method","title":"func getObjectValue(AutoreleasingUnsafeMutablePointer<AnyObject?>?, for: String, errorDescription: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool"},{"title":"func inheritProperties(from: Timecode.TextFormatter)","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/inheritproperties(from:)","type":"method"},{"title":"func isPartialStringValid(AutoreleasingUnsafeMutablePointer<NSString>, proposedSelectedRange: NSRangePointer?, originalString: String, originalSelectedRange: NSRange, errorDescription: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/ispartialstringvalid(_:proposedselectedrange:originalstring:originalselectedrange:errordescription:)","type":"method"},{"type":"method","title":"func string(for: Any?) -> String?","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter\/string(for:)"}],"title":"Timecode.TextFormatter","path":"\/documentation\/timecodekitui\/timecodekitcore\/timecode\/textformatter"},{"type":"groupMarker","title":"Extended Modules"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"type":"extension","path":"\/documentation\/timecodekitui\/swiftuicore\/view","title":"View","children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/timecodekitui\/swiftuicore\/view\/timecodefieldpastepolicy(_:)","title":"func timecodeFieldPastePolicy(TimecodeField.PastePolicy) -> some View","type":"method"}]}],"type":"extension","path":"\/documentation\/timecodekitui\/swiftuicore","title":"SwiftUICore"}]},{"type":"module","children":[{"type":"groupMarker","title":"Welcome"},{"title":"Getting Started","path":"\/documentation\/timecodekit\/getting-started","type":"article"},{"title":"TimecodeKit 2 Migration Guide","type":"article","path":"\/documentation\/timecodekit\/timecodekit-2-migration-guide"},{"type":"groupMarker","title":"Transport Formats"},{"path":"\/documentation\/timecodekit\/ltc-linear-timecode","title":"LTC (Linear Timecode)","type":"article"},{"title":"MTC (MIDI Timecode)","path":"\/documentation\/timecodekit\/mtc-midi-timecode","type":"article"}],"path":"\/documentation\/timecodekit","title":"TimecodeKit"}],"type":"module"}]},"schemaVersion":{"minor":1,"major":0,"patch":2},"includedArchiveIdentifiers":["TimecodeKitCore","TimecodeKitAV","TimecodeKitUI","TimecodeKit"]}